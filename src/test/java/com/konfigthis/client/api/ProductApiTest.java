/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Product;
import com.konfigthis.client.model.ProductAddNewProductRequest;
import com.konfigthis.client.model.ProductAddNewProductRequestDimensions;
import com.konfigthis.client.model.ProductAddNewProductRequestIdentifiers;
import com.konfigthis.client.model.ProductAddNewProductRequestManufacturerWarranty;
import com.konfigthis.client.model.ProductAddNewProductRequestProductAttributes;
import com.konfigthis.client.model.ProductAddNewProductRequestWeight;
import com.konfigthis.client.model.ProductBatchCreateProductsRequest;
import com.konfigthis.client.model.ProductBatchCreateProductsResponse;
import com.konfigthis.client.model.ProductPlan;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequest;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestDimensions;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestIdentifiers;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestManufacturerWarranty;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestProductAttributes;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestWeight;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Disabled
public class ProductApiTest {

    private static ProductApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProductApi(apiClient);
    }

    /**
     * Create a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewProductTest() throws ApiException {
        String productId = null;
        String productTitle = null;
        String brandName = null;
        Double price = null;
        String currency = null;
        String partner = null;
        String xSeelAPIKey = null;
        String xSeelAPIVersion = null;
        String merchantId = null;
        String variantId = null;
        String variantTitle = null;
        String manufacturer = null;
        String category1 = null;
        String category2 = null;
        String category3 = null;
        String category4 = null;
        String productDescription = null;
        URI imageUrl = null;
        Boolean requiresShipping = null;
        String modelNumber = null;
        String condition = null;
        String sku = null;
        ProductAddNewProductRequestIdentifiers identifiers = null;
        ProductAddNewProductRequestManufacturerWarranty manufacturerWarranty = null;
        ProductAddNewProductRequestDimensions dimensions = null;
        ProductAddNewProductRequestWeight weight = null;
        ProductAddNewProductRequestProductAttributes productAttributes = null;
        OffsetDateTime createdTs = null;
        OffsetDateTime updatedTs = null;
        Product response = api.addNewProduct(productId, productTitle, brandName, price, currency, partner, xSeelAPIKey, xSeelAPIVersion)
                .merchantId(merchantId)
                .variantId(variantId)
                .variantTitle(variantTitle)
                .manufacturer(manufacturer)
                .category1(category1)
                .category2(category2)
                .category3(category3)
                .category4(category4)
                .productDescription(productDescription)
                .imageUrl(imageUrl)
                .requiresShipping(requiresShipping)
                .modelNumber(modelNumber)
                .condition(condition)
                .sku(sku)
                .identifiers(identifiers)
                .manufacturerWarranty(manufacturerWarranty)
                .dimensions(dimensions)
                .weight(weight)
                .productAttributes(productAttributes)
                .createdTs(createdTs)
                .updatedTs(updatedTs)
                .execute();
        // TODO: test validations
    }

    /**
     * Batch create products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreateProductsTest() throws ApiException {
        String xSeelAPIKey = null;
        String xSeelAPIVersion = null;
        String partner = null;
        List<Product> products = null;
        ProductBatchCreateProductsResponse response = api.batchCreateProducts(xSeelAPIKey, xSeelAPIVersion, partner)
                .products(products)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductByIdTest() throws ApiException {
        String productId = null;
        String xSeelAPIKey = null;
        String xSeelAPIVersion = null;
        String partner = null;
        Product response = api.getProductById(productId, xSeelAPIKey, xSeelAPIVersion, partner)
                .execute();
        // TODO: test validations
    }

    /**
     * Get product plans
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPlansTest() throws ApiException {
        String productId = null;
        String xSeelAPIKey = null;
        String xSeelAPIVersion = null;
        String partner = null;
        List<ProductPlan> response = api.listPlans(productId, xSeelAPIKey, xSeelAPIVersion, partner)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProductByIdTest() throws ApiException {
        String productId = null;
        String xSeelAPIKey = null;
        String xSeelAPIVersion = null;
        String partner = null;
        Product response = api.removeProductById(productId, xSeelAPIKey, xSeelAPIVersion, partner)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductDetailsTest() throws ApiException {
        String productId = null;
        String productTitle = null;
        String brandName = null;
        Double price = null;
        String currency = null;
        String productId = null;
        String partner = null;
        String xSeelAPIKey = null;
        String xSeelAPIVersion = null;
        String merchantId = null;
        String variantId = null;
        String variantTitle = null;
        String manufacturer = null;
        String category1 = null;
        String category2 = null;
        String category3 = null;
        String category4 = null;
        String productDescription = null;
        URI imageUrl = null;
        Boolean requiresShipping = null;
        String modelNumber = null;
        String condition = null;
        String sku = null;
        ProductUpdateProductDetailsRequestIdentifiers identifiers = null;
        ProductUpdateProductDetailsRequestManufacturerWarranty manufacturerWarranty = null;
        ProductUpdateProductDetailsRequestDimensions dimensions = null;
        ProductUpdateProductDetailsRequestWeight weight = null;
        ProductUpdateProductDetailsRequestProductAttributes productAttributes = null;
        OffsetDateTime createdTs = null;
        OffsetDateTime updatedTs = null;
        Product response = api.updateProductDetails(productId, productTitle, brandName, price, currency, productId, partner, xSeelAPIKey, xSeelAPIVersion)
                .merchantId(merchantId)
                .variantId(variantId)
                .variantTitle(variantTitle)
                .manufacturer(manufacturer)
                .category1(category1)
                .category2(category2)
                .category3(category3)
                .category4(category4)
                .productDescription(productDescription)
                .imageUrl(imageUrl)
                .requiresShipping(requiresShipping)
                .modelNumber(modelNumber)
                .condition(condition)
                .sku(sku)
                .identifiers(identifiers)
                .manufacturerWarranty(manufacturerWarranty)
                .dimensions(dimensions)
                .weight(weight)
                .productAttributes(productAttributes)
                .createdTs(createdTs)
                .updatedTs(updatedTs)
                .execute();
        // TODO: test validations
    }

}
