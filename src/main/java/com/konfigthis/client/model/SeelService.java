/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SeelServiceCoveredItemsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SeelService
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SeelService {
  public static final String SERIALIZED_NAME_CONTRACT_ID = "contract_id";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private String contractId;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quote_id";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private String quoteId;

  public static final String SERIALIZED_NAME_CREATED_TS = "created_ts";
  @SerializedName(SERIALIZED_NAME_CREATED_TS)
  private OffsetDateTime createdTs;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  /**
   * The status of the service
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    CANCELLED("cancelled"),
    
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_COVERED_ITEMS = "covered_items";
  @SerializedName(SERIALIZED_NAME_COVERED_ITEMS)
  private List<SeelServiceCoveredItemsInner> coveredItems = null;

  public static final String SERIALIZED_NAME_EXTRA_INFO = "extra_info";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFO)
  private Object extraInfo;

  public SeelService() {
  }

  public SeelService contractId(String contractId) {
    
    
    
    
    this.contractId = contractId;
    return this;
  }

   /**
   * Cover ID
   * @return contractId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345678", value = "Cover ID")

  public String getContractId() {
    return contractId;
  }


  public void setContractId(String contractId) {
    
    
    
    this.contractId = contractId;
  }


  public SeelService quoteId(String quoteId) {
    
    
    
    
    this.quoteId = quoteId;
    return this;
  }

   /**
   * The identifier of the quote associated with the contract.
   * @return quoteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023010112345678", value = "The identifier of the quote associated with the contract.")

  public String getQuoteId() {
    return quoteId;
  }


  public void setQuoteId(String quoteId) {
    
    
    
    this.quoteId = quoteId;
  }


  public SeelService createdTs(OffsetDateTime createdTs) {
    
    
    
    
    this.createdTs = createdTs;
    return this;
  }

   /**
   * Service created timestamp in milliseconds
   * @return createdTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Service created timestamp in milliseconds")

  public OffsetDateTime getCreatedTs() {
    return createdTs;
  }


  public void setCreatedTs(OffsetDateTime createdTs) {
    
    
    
    this.createdTs = createdTs;
  }


  public SeelService type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Cover type of the service
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "seel-ra", value = "Cover type of the service")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public SeelService price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Price of the service
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.99", value = "Price of the service")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public SeelService status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the service
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "The status of the service")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public SeelService coveredItems(List<SeelServiceCoveredItemsInner> coveredItems) {
    
    
    
    
    this.coveredItems = coveredItems;
    return this;
  }

  public SeelService addCoveredItemsItem(SeelServiceCoveredItemsInner coveredItemsItem) {
    if (this.coveredItems == null) {
      this.coveredItems = new ArrayList<>();
    }
    this.coveredItems.add(coveredItemsItem);
    return this;
  }

   /**
   * The covered items
   * @return coveredItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The covered items")

  public List<SeelServiceCoveredItemsInner> getCoveredItems() {
    return coveredItems;
  }


  public void setCoveredItems(List<SeelServiceCoveredItemsInner> coveredItems) {
    
    
    
    this.coveredItems = coveredItems;
  }


  public SeelService extraInfo(Object extraInfo) {
    
    
    
    
    this.extraInfo = extraInfo;
    return this;
  }

   /**
   * Additional information for the service
   * @return extraInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{}", value = "Additional information for the service")

  public Object getExtraInfo() {
    return extraInfo;
  }


  public void setExtraInfo(Object extraInfo) {
    
    
    
    this.extraInfo = extraInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SeelService instance itself
   */
  public SeelService putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeelService seelService = (SeelService) o;
    return Objects.equals(this.contractId, seelService.contractId) &&
        Objects.equals(this.quoteId, seelService.quoteId) &&
        Objects.equals(this.createdTs, seelService.createdTs) &&
        Objects.equals(this.type, seelService.type) &&
        Objects.equals(this.price, seelService.price) &&
        Objects.equals(this.status, seelService.status) &&
        Objects.equals(this.coveredItems, seelService.coveredItems) &&
        Objects.equals(this.extraInfo, seelService.extraInfo)&&
        Objects.equals(this.additionalProperties, seelService.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractId, quoteId, createdTs, type, price, status, coveredItems, extraInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeelService {\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    createdTs: ").append(toIndentedString(createdTs)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    coveredItems: ").append(toIndentedString(coveredItems)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contract_id");
    openapiFields.add("quote_id");
    openapiFields.add("created_ts");
    openapiFields.add("type");
    openapiFields.add("price");
    openapiFields.add("status");
    openapiFields.add("covered_items");
    openapiFields.add("extra_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SeelService
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SeelService.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SeelService is not found in the empty JSON string", SeelService.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("contract_id") != null && !jsonObj.get("contract_id").isJsonNull()) && !jsonObj.get("contract_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_id").toString()));
      }
      if ((jsonObj.get("quote_id") != null && !jsonObj.get("quote_id").isJsonNull()) && !jsonObj.get("quote_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("covered_items") != null && !jsonObj.get("covered_items").isJsonNull()) {
        JsonArray jsonArraycoveredItems = jsonObj.getAsJsonArray("covered_items");
        if (jsonArraycoveredItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("covered_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `covered_items` to be an array in the JSON string but got `%s`", jsonObj.get("covered_items").toString()));
          }

          // validate the optional field `covered_items` (array)
          for (int i = 0; i < jsonArraycoveredItems.size(); i++) {
            SeelServiceCoveredItemsInner.validateJsonObject(jsonArraycoveredItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SeelService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SeelService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SeelService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SeelService.class));

       return (TypeAdapter<T>) new TypeAdapter<SeelService>() {
           @Override
           public void write(JsonWriter out, SeelService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SeelService read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SeelService instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SeelService given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SeelService
  * @throws IOException if the JSON string is invalid with respect to SeelService
  */
  public static SeelService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SeelService.class);
  }

 /**
  * Convert an instance of SeelService to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

