/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContractCoveredItemsInner;
import com.konfigthis.client.model.Customer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Contract
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Contract {
  public static final String SERIALIZED_NAME_CONTRACT_ID = "contract_id";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private String contractId;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quote_id";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private String quoteId;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_PREMIUM = "premium";
  @SerializedName(SERIALIZED_NAME_PREMIUM)
  private Double premium;

  public static final String SERIALIZED_NAME_PREMIUM_TAX = "premium_tax";
  @SerializedName(SERIALIZED_NAME_PREMIUM_TAX)
  private Double premiumTax;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * The current status of the contract (e.g., \&quot;active\&quot;, \&quot;cancelled\&quot;).
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    CANCELLED("cancelled"),
    
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CANCELLED_TS = "cancelled_ts";
  @SerializedName(SERIALIZED_NAME_CANCELLED_TS)
  private OffsetDateTime cancelledTs;

  public static final String SERIALIZED_NAME_CREATED_TS = "created_ts";
  @SerializedName(SERIALIZED_NAME_CREATED_TS)
  private OffsetDateTime createdTs;

  public static final String SERIALIZED_NAME_UPDATED_TS = "updated_ts";
  @SerializedName(SERIALIZED_NAME_UPDATED_TS)
  private OffsetDateTime updatedTs;

  public static final String SERIALIZED_NAME_COVERED_ITEMS = "covered_items";
  @SerializedName(SERIALIZED_NAME_COVERED_ITEMS)
  private List<ContractCoveredItemsInner> coveredItems = null;

  public Contract() {
  }

  public Contract contractId(String contractId) {
    
    
    
    
    this.contractId = contractId;
    return this;
  }

   /**
   * The unique identifier of the contract.
   * @return contractId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023010112345678", value = "The unique identifier of the contract.")

  public String getContractId() {
    return contractId;
  }


  public void setContractId(String contractId) {
    
    
    
    this.contractId = contractId;
  }


  public Contract orderId(String orderId) {
    
    
    
    
    this.orderId = orderId;
    return this;
  }

   /**
   * The identifier of the order associated with the contract.
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023010112345678", value = "The identifier of the order associated with the contract.")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    
    
    
    this.orderId = orderId;
  }


  public Contract quoteId(String quoteId) {
    
    
    
    
    this.quoteId = quoteId;
    return this;
  }

   /**
   * The identifier of the quote associated with the contract.
   * @return quoteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023010112345678", value = "The identifier of the quote associated with the contract.")

  public String getQuoteId() {
    return quoteId;
  }


  public void setQuoteId(String quoteId) {
    
    
    
    this.quoteId = quoteId;
  }


  public Contract customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public Contract premium(Double premium) {
    
    
    
    
    this.premium = premium;
    return this;
  }

   /**
   * The premium (i.e., cost) of the contract.
   * @return premium
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.99", value = "The premium (i.e., cost) of the contract.")

  public Double getPremium() {
    return premium;
  }


  public void setPremium(Double premium) {
    
    
    
    this.premium = premium;
  }


  public Contract premiumTax(Double premiumTax) {
    
    
    
    
    this.premiumTax = premiumTax;
    return this;
  }

   /**
   * The tax applied to the contract premium.
   * @return premiumTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.99", value = "The tax applied to the contract premium.")

  public Double getPremiumTax() {
    return premiumTax;
  }


  public void setPremiumTax(Double premiumTax) {
    
    
    
    this.premiumTax = premiumTax;
  }


  public Contract currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the contract.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The currency of the contract.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public Contract status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the contract (e.g., \&quot;active\&quot;, \&quot;cancelled\&quot;).
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "The current status of the contract (e.g., \"active\", \"cancelled\").")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Contract cancelledTs(OffsetDateTime cancelledTs) {
    
    
    
    
    this.cancelledTs = cancelledTs;
    return this;
  }

   /**
   * The timestamp in millisecond when the contract was cancelled (if applicable).
   * @return cancelledTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp in millisecond when the contract was cancelled (if applicable).")

  public OffsetDateTime getCancelledTs() {
    return cancelledTs;
  }


  public void setCancelledTs(OffsetDateTime cancelledTs) {
    
    
    
    this.cancelledTs = cancelledTs;
  }


  public Contract createdTs(OffsetDateTime createdTs) {
    
    
    
    
    this.createdTs = createdTs;
    return this;
  }

   /**
   * The timestamp in millisecond when the contract was created.
   * @return createdTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp in millisecond when the contract was created.")

  public OffsetDateTime getCreatedTs() {
    return createdTs;
  }


  public void setCreatedTs(OffsetDateTime createdTs) {
    
    
    
    this.createdTs = createdTs;
  }


  public Contract updatedTs(OffsetDateTime updatedTs) {
    
    
    
    
    this.updatedTs = updatedTs;
    return this;
  }

   /**
   * The timestamp in millisecond when the contract was updated.
   * @return updatedTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp in millisecond when the contract was updated.")

  public OffsetDateTime getUpdatedTs() {
    return updatedTs;
  }


  public void setUpdatedTs(OffsetDateTime updatedTs) {
    
    
    
    this.updatedTs = updatedTs;
  }


  public Contract coveredItems(List<ContractCoveredItemsInner> coveredItems) {
    
    
    
    
    this.coveredItems = coveredItems;
    return this;
  }

  public Contract addCoveredItemsItem(ContractCoveredItemsInner coveredItemsItem) {
    if (this.coveredItems == null) {
      this.coveredItems = new ArrayList<>();
    }
    this.coveredItems.add(coveredItemsItem);
    return this;
  }

   /**
   * Get coveredItems
   * @return coveredItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ContractCoveredItemsInner> getCoveredItems() {
    return coveredItems;
  }


  public void setCoveredItems(List<ContractCoveredItemsInner> coveredItems) {
    
    
    
    this.coveredItems = coveredItems;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Contract instance itself
   */
  public Contract putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contract contract = (Contract) o;
    return Objects.equals(this.contractId, contract.contractId) &&
        Objects.equals(this.orderId, contract.orderId) &&
        Objects.equals(this.quoteId, contract.quoteId) &&
        Objects.equals(this.customer, contract.customer) &&
        Objects.equals(this.premium, contract.premium) &&
        Objects.equals(this.premiumTax, contract.premiumTax) &&
        Objects.equals(this.currency, contract.currency) &&
        Objects.equals(this.status, contract.status) &&
        Objects.equals(this.cancelledTs, contract.cancelledTs) &&
        Objects.equals(this.createdTs, contract.createdTs) &&
        Objects.equals(this.updatedTs, contract.updatedTs) &&
        Objects.equals(this.coveredItems, contract.coveredItems)&&
        Objects.equals(this.additionalProperties, contract.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractId, orderId, quoteId, customer, premium, premiumTax, currency, status, cancelledTs, createdTs, updatedTs, coveredItems, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contract {\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    premium: ").append(toIndentedString(premium)).append("\n");
    sb.append("    premiumTax: ").append(toIndentedString(premiumTax)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    cancelledTs: ").append(toIndentedString(cancelledTs)).append("\n");
    sb.append("    createdTs: ").append(toIndentedString(createdTs)).append("\n");
    sb.append("    updatedTs: ").append(toIndentedString(updatedTs)).append("\n");
    sb.append("    coveredItems: ").append(toIndentedString(coveredItems)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contract_id");
    openapiFields.add("order_id");
    openapiFields.add("quote_id");
    openapiFields.add("customer");
    openapiFields.add("premium");
    openapiFields.add("premium_tax");
    openapiFields.add("currency");
    openapiFields.add("status");
    openapiFields.add("cancelled_ts");
    openapiFields.add("created_ts");
    openapiFields.add("updated_ts");
    openapiFields.add("covered_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Contract
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Contract.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Contract is not found in the empty JSON string", Contract.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("contract_id") != null && !jsonObj.get("contract_id").isJsonNull()) && !jsonObj.get("contract_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_id").toString()));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("quote_id") != null && !jsonObj.get("quote_id").isJsonNull()) && !jsonObj.get("quote_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_id").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("covered_items") != null && !jsonObj.get("covered_items").isJsonNull()) {
        JsonArray jsonArraycoveredItems = jsonObj.getAsJsonArray("covered_items");
        if (jsonArraycoveredItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("covered_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `covered_items` to be an array in the JSON string but got `%s`", jsonObj.get("covered_items").toString()));
          }

          // validate the optional field `covered_items` (array)
          for (int i = 0; i < jsonArraycoveredItems.size(); i++) {
            ContractCoveredItemsInner.validateJsonObject(jsonArraycoveredItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Contract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Contract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Contract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Contract.class));

       return (TypeAdapter<T>) new TypeAdapter<Contract>() {
           @Override
           public void write(JsonWriter out, Contract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Contract read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Contract instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Contract given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Contract
  * @throws IOException if the JSON string is invalid with respect to Contract
  */
  public static Contract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Contract.class);
  }

 /**
  * Convert an instance of Contract to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

