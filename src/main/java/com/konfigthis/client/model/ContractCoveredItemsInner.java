/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ContractCoveredItemsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContractCoveredItemsInner {
  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "line_item_id";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_VARIANT_ID = "variant_id";
  @SerializedName(SERIALIZED_NAME_VARIANT_ID)
  private String variantId;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "tracking_number";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private String carrier;

  public static final String SERIALIZED_NAME_COVERED_VALUE = "covered_value";
  @SerializedName(SERIALIZED_NAME_COVERED_VALUE)
  private Double coveredValue;

  public ContractCoveredItemsInner() {
  }

  public ContractCoveredItemsInner lineItemId(String lineItemId) {
    
    
    
    
    this.lineItemId = lineItemId;
    return this;
  }

   /**
   * The line item id covered by the contract.
   * @return lineItemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The line item id covered by the contract.")

  public String getLineItemId() {
    return lineItemId;
  }


  public void setLineItemId(String lineItemId) {
    
    
    
    this.lineItemId = lineItemId;
  }


  public ContractCoveredItemsInner quantity(Integer quantity) {
    
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of the line item covered by the contract.
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity of the line item covered by the contract.")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    
    
    
    this.quantity = quantity;
  }


  public ContractCoveredItemsInner productId(String productId) {
    
    
    
    
    this.productId = productId;
    return this;
  }

   /**
   * The ID of the product.
   * @return productId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "43f6d61d-9f19-45aa-a941-a43dfe8d0045", value = "The ID of the product.")

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    
    
    
    this.productId = productId;
  }


  public ContractCoveredItemsInner variantId(String variantId) {
    
    
    
    
    this.variantId = variantId;
    return this;
  }

   /**
   * The ID of the product variant.
   * @return variantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "91232f4c-0acd-4229-a418-bc03c5777359", value = "The ID of the product variant.")

  public String getVariantId() {
    return variantId;
  }


  public void setVariantId(String variantId) {
    
    
    
    this.variantId = variantId;
  }


  public ContractCoveredItemsInner trackingNumber(String trackingNumber) {
    
    
    
    
    this.trackingNumber = trackingNumber;
    return this;
  }

   /**
   * The tracking number associated with the asset shipment.
   * @return trackingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tracking number associated with the asset shipment.")

  public String getTrackingNumber() {
    return trackingNumber;
  }


  public void setTrackingNumber(String trackingNumber) {
    
    
    
    this.trackingNumber = trackingNumber;
  }


  public ContractCoveredItemsInner carrier(String carrier) {
    
    
    
    
    this.carrier = carrier;
    return this;
  }

   /**
   * The carrier used to ship the asset.
   * @return carrier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The carrier used to ship the asset.")

  public String getCarrier() {
    return carrier;
  }


  public void setCarrier(String carrier) {
    
    
    
    this.carrier = carrier;
  }


  public ContractCoveredItemsInner coveredValue(Double coveredValue) {
    
    
    
    
    this.coveredValue = coveredValue;
    return this;
  }

   /**
   * The value covered by the contract.
   * @return coveredValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value covered by the contract.")

  public Double getCoveredValue() {
    return coveredValue;
  }


  public void setCoveredValue(Double coveredValue) {
    
    
    
    this.coveredValue = coveredValue;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContractCoveredItemsInner instance itself
   */
  public ContractCoveredItemsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractCoveredItemsInner contractCoveredItemsInner = (ContractCoveredItemsInner) o;
    return Objects.equals(this.lineItemId, contractCoveredItemsInner.lineItemId) &&
        Objects.equals(this.quantity, contractCoveredItemsInner.quantity) &&
        Objects.equals(this.productId, contractCoveredItemsInner.productId) &&
        Objects.equals(this.variantId, contractCoveredItemsInner.variantId) &&
        Objects.equals(this.trackingNumber, contractCoveredItemsInner.trackingNumber) &&
        Objects.equals(this.carrier, contractCoveredItemsInner.carrier) &&
        Objects.equals(this.coveredValue, contractCoveredItemsInner.coveredValue)&&
        Objects.equals(this.additionalProperties, contractCoveredItemsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineItemId, quantity, productId, variantId, trackingNumber, carrier, coveredValue, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractCoveredItemsInner {\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    variantId: ").append(toIndentedString(variantId)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    coveredValue: ").append(toIndentedString(coveredValue)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("line_item_id");
    openapiFields.add("quantity");
    openapiFields.add("product_id");
    openapiFields.add("variant_id");
    openapiFields.add("tracking_number");
    openapiFields.add("carrier");
    openapiFields.add("covered_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContractCoveredItemsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContractCoveredItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractCoveredItemsInner is not found in the empty JSON string", ContractCoveredItemsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("line_item_id") != null && !jsonObj.get("line_item_id").isJsonNull()) && !jsonObj.get("line_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_item_id").toString()));
      }
      if ((jsonObj.get("product_id") != null && !jsonObj.get("product_id").isJsonNull()) && !jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if ((jsonObj.get("variant_id") != null && !jsonObj.get("variant_id").isJsonNull()) && !jsonObj.get("variant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant_id").toString()));
      }
      if ((jsonObj.get("tracking_number") != null && !jsonObj.get("tracking_number").isJsonNull()) && !jsonObj.get("tracking_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_number").toString()));
      }
      if ((jsonObj.get("carrier") != null && !jsonObj.get("carrier").isJsonNull()) && !jsonObj.get("carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractCoveredItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractCoveredItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractCoveredItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractCoveredItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractCoveredItemsInner>() {
           @Override
           public void write(JsonWriter out, ContractCoveredItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractCoveredItemsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContractCoveredItemsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContractCoveredItemsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContractCoveredItemsInner
  * @throws IOException if the JSON string is invalid with respect to ContractCoveredItemsInner
  */
  public static ContractCoveredItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractCoveredItemsInner.class);
  }

 /**
  * Convert an instance of ContractCoveredItemsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

