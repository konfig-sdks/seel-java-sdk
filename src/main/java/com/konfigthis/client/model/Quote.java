/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.Item;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Quote
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Quote {
  public static final String SERIALIZED_NAME_QUOTE_ID = "quote_id";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private String quoteId;

  public static final String SERIALIZED_NAME_CART_ID = "cart_id";
  @SerializedName(SERIALIZED_NAME_CART_ID)
  private String cartId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * The status of the quote.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACCEPTED("accepted"),
    
    REJECTED("rejected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_TS = "created_ts";
  @SerializedName(SERIALIZED_NAME_CREATED_TS)
  private OffsetDateTime createdTs;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<Item> lineItems = null;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_EXTRA_INFO = "extra_info";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFO)
  private Object extraInfo;

  public Quote() {
  }

  public Quote quoteId(String quoteId) {
    
    
    
    
    this.quoteId = quoteId;
    return this;
  }

   /**
   * The ID of the quote.
   * @return quoteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The ID of the quote.")

  public String getQuoteId() {
    return quoteId;
  }


  public void setQuoteId(String quoteId) {
    
    
    
    this.quoteId = quoteId;
  }


  public Quote cartId(String cartId) {
    
    
    
    
    this.cartId = cartId;
    return this;
  }

   /**
   * The ID of a cart.
   * @return cartId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The ID of a cart.")

  public String getCartId() {
    return cartId;
  }


  public void setCartId(String cartId) {
    
    
    
    this.cartId = cartId;
  }


  public Quote merchantId(String merchantId) {
    
    
    
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The unique identifier for the merchant within Seel&#39;s system.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The unique identifier for the merchant within Seel's system.")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    
    
    
    this.merchantId = merchantId;
  }


  public Quote sessionId(String sessionId) {
    
    
    
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * The ID of the session.
   * @return sessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The ID of the session.")

  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    
    
    
    this.sessionId = sessionId;
  }


  public Quote deviceId(String deviceId) {
    
    
    
    
    this.deviceId = deviceId;
    return this;
  }

   /**
   * The ID of the client device.
   * @return deviceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "device123", value = "The ID of the client device.")

  public String getDeviceId() {
    return deviceId;
  }


  public void setDeviceId(String deviceId) {
    
    
    
    this.deviceId = deviceId;
  }


  public Quote clientIp(String clientIp) {
    
    
    
    
    this.clientIp = clientIp;
    return this;
  }

   /**
   * The IP address of the client.
   * @return clientIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "127.0.0.1", value = "The IP address of the client.")

  public String getClientIp() {
    return clientIp;
  }


  public void setClientIp(String clientIp) {
    
    
    
    this.clientIp = clientIp;
  }


  public Quote type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of the quote.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "seel-ra", value = "The type of the quote.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public Quote price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * The price of the quote.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.99", value = "The price of the quote.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public Quote currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The three-letter currency code (ISO 4217 format), i.e. USD etc.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The three-letter currency code (ISO 4217 format), i.e. USD etc.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public Quote status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the quote.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACCEPTED", value = "The status of the quote.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Quote createdTs(OffsetDateTime createdTs) {
    
    
    
    
    this.createdTs = createdTs;
    return this;
  }

   /**
   * Quote created timestamp in milliseconds
   * @return createdTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quote created timestamp in milliseconds")

  public OffsetDateTime getCreatedTs() {
    return createdTs;
  }


  public void setCreatedTs(OffsetDateTime createdTs) {
    
    
    
    this.createdTs = createdTs;
  }


  public Quote lineItems(List<Item> lineItems) {
    
    
    
    
    this.lineItems = lineItems;
    return this;
  }

  public Quote addLineItemsItem(Item lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * The list of items included in the quote.
   * @return lineItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of items included in the quote.")

  public List<Item> getLineItems() {
    return lineItems;
  }


  public void setLineItems(List<Item> lineItems) {
    
    
    
    this.lineItems = lineItems;
  }


  public Quote shippingAddress(Address shippingAddress) {
    
    
    
    
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getShippingAddress() {
    return shippingAddress;
  }


  public void setShippingAddress(Address shippingAddress) {
    
    
    
    this.shippingAddress = shippingAddress;
  }


  public Quote customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public Quote extraInfo(Object extraInfo) {
    
    
    
    
    this.extraInfo = extraInfo;
    return this;
  }

   /**
   * Additional information for the order
   * @return extraInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{}", value = "Additional information for the order")

  public Object getExtraInfo() {
    return extraInfo;
  }


  public void setExtraInfo(Object extraInfo) {
    
    
    
    this.extraInfo = extraInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Quote instance itself
   */
  public Quote putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quote quote = (Quote) o;
    return Objects.equals(this.quoteId, quote.quoteId) &&
        Objects.equals(this.cartId, quote.cartId) &&
        Objects.equals(this.merchantId, quote.merchantId) &&
        Objects.equals(this.sessionId, quote.sessionId) &&
        Objects.equals(this.deviceId, quote.deviceId) &&
        Objects.equals(this.clientIp, quote.clientIp) &&
        Objects.equals(this.type, quote.type) &&
        Objects.equals(this.price, quote.price) &&
        Objects.equals(this.currency, quote.currency) &&
        Objects.equals(this.status, quote.status) &&
        Objects.equals(this.createdTs, quote.createdTs) &&
        Objects.equals(this.lineItems, quote.lineItems) &&
        Objects.equals(this.shippingAddress, quote.shippingAddress) &&
        Objects.equals(this.customer, quote.customer) &&
        Objects.equals(this.extraInfo, quote.extraInfo)&&
        Objects.equals(this.additionalProperties, quote.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteId, cartId, merchantId, sessionId, deviceId, clientIp, type, price, currency, status, createdTs, lineItems, shippingAddress, customer, extraInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quote {\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdTs: ").append(toIndentedString(createdTs)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quote_id");
    openapiFields.add("cart_id");
    openapiFields.add("merchant_id");
    openapiFields.add("session_id");
    openapiFields.add("device_id");
    openapiFields.add("client_ip");
    openapiFields.add("type");
    openapiFields.add("price");
    openapiFields.add("currency");
    openapiFields.add("status");
    openapiFields.add("created_ts");
    openapiFields.add("line_items");
    openapiFields.add("shipping_address");
    openapiFields.add("customer");
    openapiFields.add("extra_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Quote
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Quote.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quote is not found in the empty JSON string", Quote.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("quote_id") != null && !jsonObj.get("quote_id").isJsonNull()) && !jsonObj.get("quote_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_id").toString()));
      }
      if ((jsonObj.get("cart_id") != null && !jsonObj.get("cart_id").isJsonNull()) && !jsonObj.get("cart_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart_id").toString()));
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("client_ip") != null && !jsonObj.get("client_ip").isJsonNull()) && !jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
          }

          // validate the optional field `line_items` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            Item.validateJsonObject(jsonArraylineItems.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("shipping_address"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quote.class));

       return (TypeAdapter<T>) new TypeAdapter<Quote>() {
           @Override
           public void write(JsonWriter out, Quote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Quote read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Quote instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Quote given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Quote
  * @throws IOException if the JSON string is invalid with respect to Quote
  */
  public static Quote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quote.class);
  }

 /**
  * Convert an instance of Quote to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

