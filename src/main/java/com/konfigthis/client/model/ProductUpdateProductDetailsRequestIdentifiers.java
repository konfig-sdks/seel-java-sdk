/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProductUpdateProductDetailsRequestIdentifiers
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProductUpdateProductDetailsRequestIdentifiers {
  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private String gtin;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public static final String SERIALIZED_NAME_ISBN = "isbn";
  @SerializedName(SERIALIZED_NAME_ISBN)
  private String isbn;

  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private String barcode;

  public ProductUpdateProductDetailsRequestIdentifiers() {
  }

  public ProductUpdateProductDetailsRequestIdentifiers serialNumber(String serialNumber) {
    
    
    
    
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Serial number of a specific product unit.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SN123456", value = "Serial number of a specific product unit.")

  public String getSerialNumber() {
    return serialNumber;
  }


  public void setSerialNumber(String serialNumber) {
    
    
    
    this.serialNumber = serialNumber;
  }


  public ProductUpdateProductDetailsRequestIdentifiers gtin(String gtin) {
    
    
    
    
    this.gtin = gtin;
    return this;
  }

   /**
   * Global Trade Item Number identifier.
   * @return gtin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GTIN123456", value = "Global Trade Item Number identifier.")

  public String getGtin() {
    return gtin;
  }


  public void setGtin(String gtin) {
    
    
    
    this.gtin = gtin;
  }


  public ProductUpdateProductDetailsRequestIdentifiers upc(String upc) {
    
    
    
    
    this.upc = upc;
    return this;
  }

   /**
   * Universal Product Code identifier.
   * @return upc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UPC789012", value = "Universal Product Code identifier.")

  public String getUpc() {
    return upc;
  }


  public void setUpc(String upc) {
    
    
    
    this.upc = upc;
  }


  public ProductUpdateProductDetailsRequestIdentifiers isbn(String isbn) {
    
    
    
    
    this.isbn = isbn;
    return this;
  }

   /**
   * International Standard Book Number identifier.
   * @return isbn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ISBN345678", value = "International Standard Book Number identifier.")

  public String getIsbn() {
    return isbn;
  }


  public void setIsbn(String isbn) {
    
    
    
    this.isbn = isbn;
  }


  public ProductUpdateProductDetailsRequestIdentifiers barcode(String barcode) {
    
    
    
    
    this.barcode = barcode;
    return this;
  }

   /**
   * Barcode identifying the product.
   * @return barcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234567890", value = "Barcode identifying the product.")

  public String getBarcode() {
    return barcode;
  }


  public void setBarcode(String barcode) {
    
    
    
    this.barcode = barcode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProductUpdateProductDetailsRequestIdentifiers instance itself
   */
  public ProductUpdateProductDetailsRequestIdentifiers putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductUpdateProductDetailsRequestIdentifiers productUpdateProductDetailsRequestIdentifiers = (ProductUpdateProductDetailsRequestIdentifiers) o;
    return Objects.equals(this.serialNumber, productUpdateProductDetailsRequestIdentifiers.serialNumber) &&
        Objects.equals(this.gtin, productUpdateProductDetailsRequestIdentifiers.gtin) &&
        Objects.equals(this.upc, productUpdateProductDetailsRequestIdentifiers.upc) &&
        Objects.equals(this.isbn, productUpdateProductDetailsRequestIdentifiers.isbn) &&
        Objects.equals(this.barcode, productUpdateProductDetailsRequestIdentifiers.barcode)&&
        Objects.equals(this.additionalProperties, productUpdateProductDetailsRequestIdentifiers.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serialNumber, gtin, upc, isbn, barcode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductUpdateProductDetailsRequestIdentifiers {\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    isbn: ").append(toIndentedString(isbn)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serial_number");
    openapiFields.add("gtin");
    openapiFields.add("upc");
    openapiFields.add("isbn");
    openapiFields.add("barcode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductUpdateProductDetailsRequestIdentifiers
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductUpdateProductDetailsRequestIdentifiers.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductUpdateProductDetailsRequestIdentifiers is not found in the empty JSON string", ProductUpdateProductDetailsRequestIdentifiers.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonNull()) && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      if ((jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull()) && !jsonObj.get("gtin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
      if ((jsonObj.get("isbn") != null && !jsonObj.get("isbn").isJsonNull()) && !jsonObj.get("isbn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isbn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isbn").toString()));
      }
      if ((jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull()) && !jsonObj.get("barcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductUpdateProductDetailsRequestIdentifiers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductUpdateProductDetailsRequestIdentifiers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductUpdateProductDetailsRequestIdentifiers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductUpdateProductDetailsRequestIdentifiers.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductUpdateProductDetailsRequestIdentifiers>() {
           @Override
           public void write(JsonWriter out, ProductUpdateProductDetailsRequestIdentifiers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductUpdateProductDetailsRequestIdentifiers read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProductUpdateProductDetailsRequestIdentifiers instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductUpdateProductDetailsRequestIdentifiers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductUpdateProductDetailsRequestIdentifiers
  * @throws IOException if the JSON string is invalid with respect to ProductUpdateProductDetailsRequestIdentifiers
  */
  public static ProductUpdateProductDetailsRequestIdentifiers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductUpdateProductDetailsRequestIdentifiers.class);
  }

 /**
  * Convert an instance of ProductUpdateProductDetailsRequestIdentifiers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

