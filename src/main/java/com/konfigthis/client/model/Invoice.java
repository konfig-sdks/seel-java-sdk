/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.InvoiceInvoiceItemsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Invoice
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Invoice {
  public static final String SERIALIZED_NAME_INVOICE_ID = "invoice_id";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_BILLING_CYCLE = "billing_cycle";
  @SerializedName(SERIALIZED_NAME_BILLING_CYCLE)
  private Integer billingCycle;

  public static final String SERIALIZED_NAME_BILLING_DATE = "billing_date";
  @SerializedName(SERIALIZED_NAME_BILLING_DATE)
  private String billingDate;

  public static final String SERIALIZED_NAME_BILLING_START_DATE = "billing_start_date";
  @SerializedName(SERIALIZED_NAME_BILLING_START_DATE)
  private String billingStartDate;

  public static final String SERIALIZED_NAME_BILLING_END_DATE = "billing_end_date";
  @SerializedName(SERIALIZED_NAME_BILLING_END_DATE)
  private String billingEndDate;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * The status of the invoice.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    UNPAID("unpaid"),
    
    PAID("paid");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_INVOICE_AMOUNT = "invoice_amount";
  @SerializedName(SERIALIZED_NAME_INVOICE_AMOUNT)
  private Double invoiceAmount;

  public static final String SERIALIZED_NAME_INVOICE_LINK = "invoice_link";
  @SerializedName(SERIALIZED_NAME_INVOICE_LINK)
  private String invoiceLink;

  public static final String SERIALIZED_NAME_INVOICE_ITEMS = "invoice_items";
  @SerializedName(SERIALIZED_NAME_INVOICE_ITEMS)
  private List<InvoiceInvoiceItemsInner> invoiceItems = null;

  public Invoice() {
  }

  public Invoice invoiceId(String invoiceId) {
    
    
    
    
    this.invoiceId = invoiceId;
    return this;
  }

   /**
   * The ID of the invoice.
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "The ID of the invoice.")

  public String getInvoiceId() {
    return invoiceId;
  }


  public void setInvoiceId(String invoiceId) {
    
    
    
    this.invoiceId = invoiceId;
  }


  public Invoice merchantId(String merchantId) {
    
    
    
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The ID of the merchant.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "The ID of the merchant.")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    
    
    
    this.merchantId = merchantId;
  }


  public Invoice billingCycle(Integer billingCycle) {
    
    
    
    
    this.billingCycle = billingCycle;
    return this;
  }

   /**
   * The number of the billing cycle.
   * @return billingCycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The number of the billing cycle.")

  public Integer getBillingCycle() {
    return billingCycle;
  }


  public void setBillingCycle(Integer billingCycle) {
    
    
    
    this.billingCycle = billingCycle;
  }


  public Invoice billingDate(String billingDate) {
    
    
    
    
    this.billingDate = billingDate;
    return this;
  }

   /**
   * The date when the merchant was charged for contracts sold.
   * @return billingDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1686049398000", value = "The date when the merchant was charged for contracts sold.")

  public String getBillingDate() {
    return billingDate;
  }


  public void setBillingDate(String billingDate) {
    
    
    
    this.billingDate = billingDate;
  }


  public Invoice billingStartDate(String billingStartDate) {
    
    
    
    
    this.billingStartDate = billingStartDate;
    return this;
  }

   /**
   * The start date of the billing cycle.
   * @return billingStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1686049398000", value = "The start date of the billing cycle.")

  public String getBillingStartDate() {
    return billingStartDate;
  }


  public void setBillingStartDate(String billingStartDate) {
    
    
    
    this.billingStartDate = billingStartDate;
  }


  public Invoice billingEndDate(String billingEndDate) {
    
    
    
    
    this.billingEndDate = billingEndDate;
    return this;
  }

   /**
   * The end date of the billing cycle.
   * @return billingEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1686049398000", value = "The end date of the billing cycle.")

  public String getBillingEndDate() {
    return billingEndDate;
  }


  public void setBillingEndDate(String billingEndDate) {
    
    
    
    this.billingEndDate = billingEndDate;
  }


  public Invoice currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The three-letter currency code (ISO 4217 format).
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "The three-letter currency code (ISO 4217 format).")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public Invoice status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the invoice.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UNPAID", value = "The status of the invoice.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Invoice invoiceAmount(Double invoiceAmount) {
    
    
    
    
    this.invoiceAmount = invoiceAmount;
    return this;
  }

   /**
   * The amount of the invoice.
   * @return invoiceAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "190", value = "The amount of the invoice.")

  public Double getInvoiceAmount() {
    return invoiceAmount;
  }


  public void setInvoiceAmount(Double invoiceAmount) {
    
    
    
    this.invoiceAmount = invoiceAmount;
  }


  public Invoice invoiceLink(String invoiceLink) {
    
    
    
    
    this.invoiceLink = invoiceLink;
    return this;
  }

   /**
   * URL of the invoice
   * @return invoiceLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://invoicelinke.com", value = "URL of the invoice")

  public String getInvoiceLink() {
    return invoiceLink;
  }


  public void setInvoiceLink(String invoiceLink) {
    
    
    
    this.invoiceLink = invoiceLink;
  }


  public Invoice invoiceItems(List<InvoiceInvoiceItemsInner> invoiceItems) {
    
    
    
    
    this.invoiceItems = invoiceItems;
    return this;
  }

  public Invoice addInvoiceItemsItem(InvoiceInvoiceItemsInner invoiceItemsItem) {
    if (this.invoiceItems == null) {
      this.invoiceItems = new ArrayList<>();
    }
    this.invoiceItems.add(invoiceItemsItem);
    return this;
  }

   /**
   * A list of contracts associated with this invoice.
   * @return invoiceItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of contracts associated with this invoice.")

  public List<InvoiceInvoiceItemsInner> getInvoiceItems() {
    return invoiceItems;
  }


  public void setInvoiceItems(List<InvoiceInvoiceItemsInner> invoiceItems) {
    
    
    
    this.invoiceItems = invoiceItems;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Invoice instance itself
   */
  public Invoice putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.invoiceId, invoice.invoiceId) &&
        Objects.equals(this.merchantId, invoice.merchantId) &&
        Objects.equals(this.billingCycle, invoice.billingCycle) &&
        Objects.equals(this.billingDate, invoice.billingDate) &&
        Objects.equals(this.billingStartDate, invoice.billingStartDate) &&
        Objects.equals(this.billingEndDate, invoice.billingEndDate) &&
        Objects.equals(this.currency, invoice.currency) &&
        Objects.equals(this.status, invoice.status) &&
        Objects.equals(this.invoiceAmount, invoice.invoiceAmount) &&
        Objects.equals(this.invoiceLink, invoice.invoiceLink) &&
        Objects.equals(this.invoiceItems, invoice.invoiceItems)&&
        Objects.equals(this.additionalProperties, invoice.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoiceId, merchantId, billingCycle, billingDate, billingStartDate, billingEndDate, currency, status, invoiceAmount, invoiceLink, invoiceItems, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    billingCycle: ").append(toIndentedString(billingCycle)).append("\n");
    sb.append("    billingDate: ").append(toIndentedString(billingDate)).append("\n");
    sb.append("    billingStartDate: ").append(toIndentedString(billingStartDate)).append("\n");
    sb.append("    billingEndDate: ").append(toIndentedString(billingEndDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    invoiceAmount: ").append(toIndentedString(invoiceAmount)).append("\n");
    sb.append("    invoiceLink: ").append(toIndentedString(invoiceLink)).append("\n");
    sb.append("    invoiceItems: ").append(toIndentedString(invoiceItems)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("invoice_id");
    openapiFields.add("merchant_id");
    openapiFields.add("billing_cycle");
    openapiFields.add("billing_date");
    openapiFields.add("billing_start_date");
    openapiFields.add("billing_end_date");
    openapiFields.add("currency");
    openapiFields.add("status");
    openapiFields.add("invoice_amount");
    openapiFields.add("invoice_link");
    openapiFields.add("invoice_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Invoice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("invoice_id") != null && !jsonObj.get("invoice_id").isJsonNull()) && !jsonObj.get("invoice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_id").toString()));
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if ((jsonObj.get("billing_date") != null && !jsonObj.get("billing_date").isJsonNull()) && !jsonObj.get("billing_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_date").toString()));
      }
      if ((jsonObj.get("billing_start_date") != null && !jsonObj.get("billing_start_date").isJsonNull()) && !jsonObj.get("billing_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_start_date").toString()));
      }
      if ((jsonObj.get("billing_end_date") != null && !jsonObj.get("billing_end_date").isJsonNull()) && !jsonObj.get("billing_end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_end_date").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("invoice_link") != null && !jsonObj.get("invoice_link").isJsonNull()) && !jsonObj.get("invoice_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_link").toString()));
      }
      if (jsonObj.get("invoice_items") != null && !jsonObj.get("invoice_items").isJsonNull()) {
        JsonArray jsonArrayinvoiceItems = jsonObj.getAsJsonArray("invoice_items");
        if (jsonArrayinvoiceItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoice_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoice_items` to be an array in the JSON string but got `%s`", jsonObj.get("invoice_items").toString()));
          }

          // validate the optional field `invoice_items` (array)
          for (int i = 0; i < jsonArrayinvoiceItems.size(); i++) {
            InvoiceInvoiceItemsInner.validateJsonObject(jsonArrayinvoiceItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Invoice instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Invoice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Invoice
  * @throws IOException if the JSON string is invalid with respect to Invoice
  */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

 /**
  * Convert an instance of Invoice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

