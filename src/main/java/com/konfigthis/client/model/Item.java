/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ItemShippingOrigin;
import com.konfigthis.client.model.ProductAttributes;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Item
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Item {
  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "line_item_id";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_TITLE = "product_title";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TITLE)
  private String productTitle;

  public static final String SERIALIZED_NAME_PRODUCT_DESCRIPTION = "product_description";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DESCRIPTION)
  private String productDescription;

  public static final String SERIALIZED_NAME_VARIANT_ID = "variant_id";
  @SerializedName(SERIALIZED_NAME_VARIANT_ID)
  private String variantId;

  public static final String SERIALIZED_NAME_VARIANT_TITLE = "variant_title";
  @SerializedName(SERIALIZED_NAME_VARIANT_TITLE)
  private String variantTitle;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SELLER_ID = "seller_id";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private String sellerName;

  public static final String SERIALIZED_NAME_BRAND_NAME = "brand_name";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_ALLOCATED_DISCOUNTS = "allocated_discounts";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_DISCOUNTS)
  private Double allocatedDiscounts;

  public static final String SERIALIZED_NAME_SALES_TAX = "sales_tax";
  @SerializedName(SERIALIZED_NAME_SALES_TAX)
  private Double salesTax;

  public static final String SERIALIZED_NAME_RETAIL_PRICE = "retail_price";
  @SerializedName(SERIALIZED_NAME_RETAIL_PRICE)
  private Double retailPrice;

  public static final String SERIALIZED_NAME_FINAL_PRICE = "final_price";
  @SerializedName(SERIALIZED_NAME_FINAL_PRICE)
  private Double finalPrice;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_REQUIRES_SHIPPING = "requires_shipping";
  @SerializedName(SERIALIZED_NAME_REQUIRES_SHIPPING)
  private Boolean requiresShipping;

  public static final String SERIALIZED_NAME_PRODUCT_URL = "product_url";
  @SerializedName(SERIALIZED_NAME_PRODUCT_URL)
  private String productUrl;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_CATEGORY1 = "category_1";
  @SerializedName(SERIALIZED_NAME_CATEGORY1)
  private String category1;

  public static final String SERIALIZED_NAME_CATEGORY2 = "category_2";
  @SerializedName(SERIALIZED_NAME_CATEGORY2)
  private String category2;

  public static final String SERIALIZED_NAME_CATEGORY3 = "category_3";
  @SerializedName(SERIALIZED_NAME_CATEGORY3)
  private String category3;

  public static final String SERIALIZED_NAME_CATEGORY4 = "category_4";
  @SerializedName(SERIALIZED_NAME_CATEGORY4)
  private String category4;

  public static final String SERIALIZED_NAME_IS_FINAL_SALE = "is_final_sale";
  @SerializedName(SERIALIZED_NAME_IS_FINAL_SALE)
  private Boolean isFinalSale;

  /**
   * The physical condition of the item (e.g. new, used, refurbished)
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
 public enum ConditionEnum {
    NEW("new"),
    
    USED("used"),
    
    REFURBISHED("refurbished");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String value) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ConditionEnum condition;

  public static final String SERIALIZED_NAME_PRODUCT_ATTRIBUTES = "product_attributes";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ATTRIBUTES)
  private ProductAttributes productAttributes;

  public static final String SERIALIZED_NAME_SHIPPING_ORIGIN = "shipping_origin";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ORIGIN)
  private ItemShippingOrigin shippingOrigin;

  public static final String SERIALIZED_NAME_EXTRA_INFO = "extra_info";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFO)
  private Object extraInfo;

  public Item() {
  }

  public Item lineItemId(String lineItemId) {
    
    
    
    
    this.lineItemId = lineItemId;
    return this;
  }

   /**
   * The ID of the item.
   * @return lineItemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "43f6d61d-9f19-45aa-a941-a43dfe8d0045", required = true, value = "The ID of the item.")

  public String getLineItemId() {
    return lineItemId;
  }


  public void setLineItemId(String lineItemId) {
    
    
    
    this.lineItemId = lineItemId;
  }


  public Item productId(String productId) {
    
    
    
    
    this.productId = productId;
    return this;
  }

   /**
   * The ID of the product.
   * @return productId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "43f6d61d-9f19-45aa-a941-a43dfe8d0045", required = true, value = "The ID of the product.")

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    
    
    
    this.productId = productId;
  }


  public Item productTitle(String productTitle) {
    
    
    
    
    this.productTitle = productTitle;
    return this;
  }

   /**
   * The title of the product.
   * @return productTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "title_1", required = true, value = "The title of the product.")

  public String getProductTitle() {
    return productTitle;
  }


  public void setProductTitle(String productTitle) {
    
    
    
    this.productTitle = productTitle;
  }


  public Item productDescription(String productDescription) {
    
    
    
    
    this.productDescription = productDescription;
    return this;
  }

   /**
   * The description of the product.
   * @return productDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "description_1", value = "The description of the product.")

  public String getProductDescription() {
    return productDescription;
  }


  public void setProductDescription(String productDescription) {
    
    
    
    this.productDescription = productDescription;
  }


  public Item variantId(String variantId) {
    
    
    
    
    this.variantId = variantId;
    return this;
  }

   /**
   * The ID of the product variant.
   * @return variantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "91232f4c-0acd-4229-a418-bc03c5777359", value = "The ID of the product variant.")

  public String getVariantId() {
    return variantId;
  }


  public void setVariantId(String variantId) {
    
    
    
    this.variantId = variantId;
  }


  public Item variantTitle(String variantTitle) {
    
    
    
    
    this.variantTitle = variantTitle;
    return this;
  }

   /**
   * The title of the product variant.
   * @return variantTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "variant_title", value = "The title of the product variant.")

  public String getVariantTitle() {
    return variantTitle;
  }


  public void setVariantTitle(String variantTitle) {
    
    
    
    this.variantTitle = variantTitle;
  }


  public Item sku(String sku) {
    
    
    
    
    this.sku = sku;
    return this;
  }

   /**
   * The sku of the product variant.
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sku", value = "The sku of the product variant.")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    
    
    
    this.sku = sku;
  }


  public Item sellerId(String sellerId) {
    
    
    
    
    this.sellerId = sellerId;
    return this;
  }

   /**
   * The ID of the seller.
   * @return sellerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "91232f4c-0acd-4229-a418-bc03c5777359", value = "The ID of the seller.")

  public String getSellerId() {
    return sellerId;
  }


  public void setSellerId(String sellerId) {
    
    
    
    this.sellerId = sellerId;
  }


  public Item sellerName(String sellerName) {
    
    
    
    
    this.sellerName = sellerName;
    return this;
  }

   /**
   * The name of the seller.
   * @return sellerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "seller name", value = "The name of the seller.")

  public String getSellerName() {
    return sellerName;
  }


  public void setSellerName(String sellerName) {
    
    
    
    this.sellerName = sellerName;
  }


  public Item brandName(String brandName) {
    
    
    
    
    this.brandName = brandName;
    return this;
  }

   /**
   * The brand name of the product.
   * @return brandName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "brand", value = "The brand name of the product.")

  public String getBrandName() {
    return brandName;
  }


  public void setBrandName(String brandName) {
    
    
    
    this.brandName = brandName;
  }


  public Item quantity(Integer quantity) {
    
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of the product.
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The quantity of the product.")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    
    
    
    this.quantity = quantity;
  }


  public Item price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * The price of the product.
   * @return price
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "34.33", required = true, value = "The price of the product.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public Item allocatedDiscounts(Double allocatedDiscounts) {
    
    
    
    
    this.allocatedDiscounts = allocatedDiscounts;
    return this;
  }

   /**
   * The allocated discounts of the product.
   * @return allocatedDiscounts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "The allocated discounts of the product.")

  public Double getAllocatedDiscounts() {
    return allocatedDiscounts;
  }


  public void setAllocatedDiscounts(Double allocatedDiscounts) {
    
    
    
    this.allocatedDiscounts = allocatedDiscounts;
  }


  public Item salesTax(Double salesTax) {
    
    
    
    
    this.salesTax = salesTax;
    return this;
  }

   /**
   * The sales tax of the product.
   * @return salesTax
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4.33", required = true, value = "The sales tax of the product.")

  public Double getSalesTax() {
    return salesTax;
  }


  public void setSalesTax(Double salesTax) {
    
    
    
    this.salesTax = salesTax;
  }


  public Item retailPrice(Double retailPrice) {
    
    
    
    
    this.retailPrice = retailPrice;
    return this;
  }

   /**
   * The retail price of the product.
   * @return retailPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "34.33", value = "The retail price of the product.")

  public Double getRetailPrice() {
    return retailPrice;
  }


  public void setRetailPrice(Double retailPrice) {
    
    
    
    this.retailPrice = retailPrice;
  }


  public Item finalPrice(Double finalPrice) {
    
    
    
    
    this.finalPrice = finalPrice;
    return this;
  }

   /**
   * The final price of the product.
   * @return finalPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "28.66", required = true, value = "The final price of the product.")

  public Double getFinalPrice() {
    return finalPrice;
  }


  public void setFinalPrice(Double finalPrice) {
    
    
    
    this.finalPrice = finalPrice;
  }


  public Item currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the price.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "The currency of the price.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public Item requiresShipping(Boolean requiresShipping) {
    
    
    
    
    this.requiresShipping = requiresShipping;
    return this;
  }

   /**
   * Whether the item requires shipping or not.
   * @return requiresShipping
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the item requires shipping or not.")

  public Boolean getRequiresShipping() {
    return requiresShipping;
  }


  public void setRequiresShipping(Boolean requiresShipping) {
    
    
    
    this.requiresShipping = requiresShipping;
  }


  public Item productUrl(String productUrl) {
    
    
    
    
    this.productUrl = productUrl;
    return this;
  }

   /**
   * The URL of the product.
   * @return productUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "image_url", value = "The URL of the product.")

  public String getProductUrl() {
    return productUrl;
  }


  public void setProductUrl(String productUrl) {
    
    
    
    this.productUrl = productUrl;
  }


  public Item imageUrl(String imageUrl) {
    
    
    
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * The URL of the product image.
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "image_url", value = "The URL of the product image.")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    
    
    
    this.imageUrl = imageUrl;
  }


  public Item category1(String category1) {
    
    
    
    
    this.category1 = category1;
    return this;
  }

   /**
   * The main category of the product.
   * @return category1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "main category", required = true, value = "The main category of the product.")

  public String getCategory1() {
    return category1;
  }


  public void setCategory1(String category1) {
    
    
    
    this.category1 = category1;
  }


  public Item category2(String category2) {
    
    
    
    
    this.category2 = category2;
    return this;
  }

   /**
   * The sub category of the product.
   * @return category2
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "sub category 2", required = true, value = "The sub category of the product.")

  public String getCategory2() {
    return category2;
  }


  public void setCategory2(String category2) {
    
    
    
    this.category2 = category2;
  }


  public Item category3(String category3) {
    
    
    
    
    this.category3 = category3;
    return this;
  }

   /**
   * The sub category of the product.
   * @return category3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sub category 3", value = "The sub category of the product.")

  public String getCategory3() {
    return category3;
  }


  public void setCategory3(String category3) {
    
    
    
    this.category3 = category3;
  }


  public Item category4(String category4) {
    
    
    
    
    this.category4 = category4;
    return this;
  }

   /**
   * The sub category of the product.
   * @return category4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sub category 4", value = "The sub category of the product.")

  public String getCategory4() {
    return category4;
  }


  public void setCategory4(String category4) {
    
    
    
    this.category4 = category4;
  }


  public Item isFinalSale(Boolean isFinalSale) {
    
    
    
    
    this.isFinalSale = isFinalSale;
    return this;
  }

   /**
   * Whether the item is final sale or not.
   * @return isFinalSale
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the item is final sale or not.")

  public Boolean getIsFinalSale() {
    return isFinalSale;
  }


  public void setIsFinalSale(Boolean isFinalSale) {
    
    
    
    this.isFinalSale = isFinalSale;
  }


  public Item condition(ConditionEnum condition) {
    
    
    
    
    this.condition = condition;
    return this;
  }

   /**
   * The physical condition of the item (e.g. new, used, refurbished)
   * @return condition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NEW", required = true, value = "The physical condition of the item (e.g. new, used, refurbished)")

  public ConditionEnum getCondition() {
    return condition;
  }


  public void setCondition(ConditionEnum condition) {
    
    
    
    this.condition = condition;
  }


  public Item productAttributes(ProductAttributes productAttributes) {
    
    
    
    
    this.productAttributes = productAttributes;
    return this;
  }

   /**
   * Get productAttributes
   * @return productAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductAttributes getProductAttributes() {
    return productAttributes;
  }


  public void setProductAttributes(ProductAttributes productAttributes) {
    
    
    
    this.productAttributes = productAttributes;
  }


  public Item shippingOrigin(ItemShippingOrigin shippingOrigin) {
    
    
    
    
    this.shippingOrigin = shippingOrigin;
    return this;
  }

   /**
   * Get shippingOrigin
   * @return shippingOrigin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ItemShippingOrigin getShippingOrigin() {
    return shippingOrigin;
  }


  public void setShippingOrigin(ItemShippingOrigin shippingOrigin) {
    
    
    
    this.shippingOrigin = shippingOrigin;
  }


  public Item extraInfo(Object extraInfo) {
    
    
    
    
    this.extraInfo = extraInfo;
    return this;
  }

   /**
   * Extra information about the product.
   * @return extraInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{}", value = "Extra information about the product.")

  public Object getExtraInfo() {
    return extraInfo;
  }


  public void setExtraInfo(Object extraInfo) {
    
    
    
    this.extraInfo = extraInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Item instance itself
   */
  public Item putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.lineItemId, item.lineItemId) &&
        Objects.equals(this.productId, item.productId) &&
        Objects.equals(this.productTitle, item.productTitle) &&
        Objects.equals(this.productDescription, item.productDescription) &&
        Objects.equals(this.variantId, item.variantId) &&
        Objects.equals(this.variantTitle, item.variantTitle) &&
        Objects.equals(this.sku, item.sku) &&
        Objects.equals(this.sellerId, item.sellerId) &&
        Objects.equals(this.sellerName, item.sellerName) &&
        Objects.equals(this.brandName, item.brandName) &&
        Objects.equals(this.quantity, item.quantity) &&
        Objects.equals(this.price, item.price) &&
        Objects.equals(this.allocatedDiscounts, item.allocatedDiscounts) &&
        Objects.equals(this.salesTax, item.salesTax) &&
        Objects.equals(this.retailPrice, item.retailPrice) &&
        Objects.equals(this.finalPrice, item.finalPrice) &&
        Objects.equals(this.currency, item.currency) &&
        Objects.equals(this.requiresShipping, item.requiresShipping) &&
        Objects.equals(this.productUrl, item.productUrl) &&
        Objects.equals(this.imageUrl, item.imageUrl) &&
        Objects.equals(this.category1, item.category1) &&
        Objects.equals(this.category2, item.category2) &&
        Objects.equals(this.category3, item.category3) &&
        Objects.equals(this.category4, item.category4) &&
        Objects.equals(this.isFinalSale, item.isFinalSale) &&
        Objects.equals(this.condition, item.condition) &&
        Objects.equals(this.productAttributes, item.productAttributes) &&
        Objects.equals(this.shippingOrigin, item.shippingOrigin) &&
        Objects.equals(this.extraInfo, item.extraInfo)&&
        Objects.equals(this.additionalProperties, item.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineItemId, productId, productTitle, productDescription, variantId, variantTitle, sku, sellerId, sellerName, brandName, quantity, price, allocatedDiscounts, salesTax, retailPrice, finalPrice, currency, requiresShipping, productUrl, imageUrl, category1, category2, category3, category4, isFinalSale, condition, productAttributes, shippingOrigin, extraInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productTitle: ").append(toIndentedString(productTitle)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    variantId: ").append(toIndentedString(variantId)).append("\n");
    sb.append("    variantTitle: ").append(toIndentedString(variantTitle)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    allocatedDiscounts: ").append(toIndentedString(allocatedDiscounts)).append("\n");
    sb.append("    salesTax: ").append(toIndentedString(salesTax)).append("\n");
    sb.append("    retailPrice: ").append(toIndentedString(retailPrice)).append("\n");
    sb.append("    finalPrice: ").append(toIndentedString(finalPrice)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    requiresShipping: ").append(toIndentedString(requiresShipping)).append("\n");
    sb.append("    productUrl: ").append(toIndentedString(productUrl)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    category1: ").append(toIndentedString(category1)).append("\n");
    sb.append("    category2: ").append(toIndentedString(category2)).append("\n");
    sb.append("    category3: ").append(toIndentedString(category3)).append("\n");
    sb.append("    category4: ").append(toIndentedString(category4)).append("\n");
    sb.append("    isFinalSale: ").append(toIndentedString(isFinalSale)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    productAttributes: ").append(toIndentedString(productAttributes)).append("\n");
    sb.append("    shippingOrigin: ").append(toIndentedString(shippingOrigin)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("line_item_id");
    openapiFields.add("product_id");
    openapiFields.add("product_title");
    openapiFields.add("product_description");
    openapiFields.add("variant_id");
    openapiFields.add("variant_title");
    openapiFields.add("sku");
    openapiFields.add("seller_id");
    openapiFields.add("seller_name");
    openapiFields.add("brand_name");
    openapiFields.add("quantity");
    openapiFields.add("price");
    openapiFields.add("allocated_discounts");
    openapiFields.add("sales_tax");
    openapiFields.add("retail_price");
    openapiFields.add("final_price");
    openapiFields.add("currency");
    openapiFields.add("requires_shipping");
    openapiFields.add("product_url");
    openapiFields.add("image_url");
    openapiFields.add("category_1");
    openapiFields.add("category_2");
    openapiFields.add("category_3");
    openapiFields.add("category_4");
    openapiFields.add("is_final_sale");
    openapiFields.add("condition");
    openapiFields.add("product_attributes");
    openapiFields.add("shipping_origin");
    openapiFields.add("extra_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("line_item_id");
    openapiRequiredFields.add("product_id");
    openapiRequiredFields.add("product_title");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("allocated_discounts");
    openapiRequiredFields.add("sales_tax");
    openapiRequiredFields.add("final_price");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("requires_shipping");
    openapiRequiredFields.add("category_1");
    openapiRequiredFields.add("category_2");
    openapiRequiredFields.add("is_final_sale");
    openapiRequiredFields.add("condition");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Item
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Item.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("line_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_item_id").toString()));
      }
      if (!jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if (!jsonObj.get("product_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_title").toString()));
      }
      if ((jsonObj.get("product_description") != null && !jsonObj.get("product_description").isJsonNull()) && !jsonObj.get("product_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_description").toString()));
      }
      if ((jsonObj.get("variant_id") != null && !jsonObj.get("variant_id").isJsonNull()) && !jsonObj.get("variant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant_id").toString()));
      }
      if ((jsonObj.get("variant_title") != null && !jsonObj.get("variant_title").isJsonNull()) && !jsonObj.get("variant_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant_title").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("seller_id") != null && !jsonObj.get("seller_id").isJsonNull()) && !jsonObj.get("seller_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_id").toString()));
      }
      if ((jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) && !jsonObj.get("seller_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
      }
      if ((jsonObj.get("brand_name") != null && !jsonObj.get("brand_name").isJsonNull()) && !jsonObj.get("brand_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_name").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("product_url") != null && !jsonObj.get("product_url").isJsonNull()) && !jsonObj.get("product_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_url").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (!jsonObj.get("category_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_1").toString()));
      }
      if (!jsonObj.get("category_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_2").toString()));
      }
      if ((jsonObj.get("category_3") != null && !jsonObj.get("category_3").isJsonNull()) && !jsonObj.get("category_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_3").toString()));
      }
      if ((jsonObj.get("category_4") != null && !jsonObj.get("category_4").isJsonNull()) && !jsonObj.get("category_4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_4").toString()));
      }
      if (!jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      // validate the optional field `product_attributes`
      if (jsonObj.get("product_attributes") != null && !jsonObj.get("product_attributes").isJsonNull()) {
        ProductAttributes.validateJsonObject(jsonObj.getAsJsonObject("product_attributes"));
      }
      // validate the optional field `shipping_origin`
      if (jsonObj.get("shipping_origin") != null && !jsonObj.get("shipping_origin").isJsonNull()) {
        ItemShippingOrigin.validateJsonObject(jsonObj.getAsJsonObject("shipping_origin"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Item instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Item given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Item
  * @throws IOException if the JSON string is invalid with respect to Item
  */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

 /**
  * Convert an instance of Item to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

