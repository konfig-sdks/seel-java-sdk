/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.Fulfillment;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.OrderRefund;
import com.konfigthis.client.model.SeelService;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Order
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Order {
  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "order_number";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_CART_ID = "cart_id";
  @SerializedName(SERIALIZED_NAME_CART_ID)
  private String cartId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_CREATED_TS = "created_ts";
  @SerializedName(SERIALIZED_NAME_CREATED_TS)
  private OffsetDateTime createdTs;

  public static final String SERIALIZED_NAME_CANCELLED_TS = "cancelled_ts";
  @SerializedName(SERIALIZED_NAME_CANCELLED_TS)
  private OffsetDateTime cancelledTs;

  public static final String SERIALIZED_NAME_UPDATED_TS = "updated_ts";
  @SerializedName(SERIALIZED_NAME_UPDATED_TS)
  private OffsetDateTime updatedTs;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<Item> lineItems = null;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_FULFILLMENTS = "fulfillments";
  @SerializedName(SERIALIZED_NAME_FULFILLMENTS)
  private List<Fulfillment> fulfillments = null;

  public static final String SERIALIZED_NAME_SEEL_SERVICES = "seel_services";
  @SerializedName(SERIALIZED_NAME_SEEL_SERVICES)
  private List<SeelService> seelServices = null;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<OrderRefund> refunds = null;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_EXTRA_INFO = "extra_info";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFO)
  private Object extraInfo;

  public Order() {
  }

  public Order orderId(String orderId) {
    
    
    
    
    this.orderId = orderId;
    return this;
  }

   /**
   * The unique identifier for the order in the system.
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The unique identifier for the order in the system.")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    
    
    
    this.orderId = orderId;
  }


  public Order orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * The reference number that is visible to the merchant and shopper. Use the order ID value if there is no separate order number.
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The reference number that is visible to the merchant and shopper. Use the order ID value if there is no separate order number.")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public Order cartId(String cartId) {
    
    
    
    
    this.cartId = cartId;
    return this;
  }

   /**
   * The ID of a cart.
   * @return cartId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The ID of a cart.")

  public String getCartId() {
    return cartId;
  }


  public void setCartId(String cartId) {
    
    
    
    this.cartId = cartId;
  }


  public Order merchantId(String merchantId) {
    
    
    
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The unique identifier for the merchant within Seel&#39;s system.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The unique identifier for the merchant within Seel's system.")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    
    
    
    this.merchantId = merchantId;
  }


  public Order sessionId(String sessionId) {
    
    
    
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * The ID of the session.
   * @return sessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "223128", value = "The ID of the session.")

  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    
    
    
    this.sessionId = sessionId;
  }


  public Order deviceId(String deviceId) {
    
    
    
    
    this.deviceId = deviceId;
    return this;
  }

   /**
   * The ID of the client device.
   * @return deviceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "device123", value = "The ID of the client device.")

  public String getDeviceId() {
    return deviceId;
  }


  public void setDeviceId(String deviceId) {
    
    
    
    this.deviceId = deviceId;
  }


  public Order clientIp(String clientIp) {
    
    
    
    
    this.clientIp = clientIp;
    return this;
  }

   /**
   * The IP address of the client.
   * @return clientIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "127.0.0.1", value = "The IP address of the client.")

  public String getClientIp() {
    return clientIp;
  }


  public void setClientIp(String clientIp) {
    
    
    
    this.clientIp = clientIp;
  }


  public Order createdTs(OffsetDateTime createdTs) {
    
    
    
    
    this.createdTs = createdTs;
    return this;
  }

   /**
   * Order created timestamp in milliseconds
   * @return createdTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order created timestamp in milliseconds")

  public OffsetDateTime getCreatedTs() {
    return createdTs;
  }


  public void setCreatedTs(OffsetDateTime createdTs) {
    
    
    
    this.createdTs = createdTs;
  }


  public Order cancelledTs(OffsetDateTime cancelledTs) {
    
    
    
    
    this.cancelledTs = cancelledTs;
    return this;
  }

   /**
   * Order cancelled timestamp in milliseconds
   * @return cancelledTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order cancelled timestamp in milliseconds")

  public OffsetDateTime getCancelledTs() {
    return cancelledTs;
  }


  public void setCancelledTs(OffsetDateTime cancelledTs) {
    
    
    
    this.cancelledTs = cancelledTs;
  }


  public Order updatedTs(OffsetDateTime updatedTs) {
    
    
    
    
    this.updatedTs = updatedTs;
    return this;
  }

   /**
   * Order updated timestamp in milliseconds
   * @return updatedTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order updated timestamp in milliseconds")

  public OffsetDateTime getUpdatedTs() {
    return updatedTs;
  }


  public void setUpdatedTs(OffsetDateTime updatedTs) {
    
    
    
    this.updatedTs = updatedTs;
  }


  public Order lineItems(List<Item> lineItems) {
    
    
    
    
    this.lineItems = lineItems;
    return this;
  }

  public Order addLineItemsItem(Item lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * The list of items included in the quote.
   * @return lineItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of items included in the quote.")

  public List<Item> getLineItems() {
    return lineItems;
  }


  public void setLineItems(List<Item> lineItems) {
    
    
    
    this.lineItems = lineItems;
  }


  public Order shippingAddress(Address shippingAddress) {
    
    
    
    
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getShippingAddress() {
    return shippingAddress;
  }


  public void setShippingAddress(Address shippingAddress) {
    
    
    
    this.shippingAddress = shippingAddress;
  }


  public Order fulfillments(List<Fulfillment> fulfillments) {
    
    
    
    
    this.fulfillments = fulfillments;
    return this;
  }

  public Order addFulfillmentsItem(Fulfillment fulfillmentsItem) {
    if (this.fulfillments == null) {
      this.fulfillments = new ArrayList<>();
    }
    this.fulfillments.add(fulfillmentsItem);
    return this;
  }

   /**
   * The list of fulfillments for the order.
   * @return fulfillments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of fulfillments for the order.")

  public List<Fulfillment> getFulfillments() {
    return fulfillments;
  }


  public void setFulfillments(List<Fulfillment> fulfillments) {
    
    
    
    this.fulfillments = fulfillments;
  }


  public Order seelServices(List<SeelService> seelServices) {
    
    
    
    
    this.seelServices = seelServices;
    return this;
  }

  public Order addSeelServicesItem(SeelService seelServicesItem) {
    if (this.seelServices == null) {
      this.seelServices = new ArrayList<>();
    }
    this.seelServices.add(seelServicesItem);
    return this;
  }

   /**
   * The list of Seel services of the order.
   * @return seelServices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of Seel services of the order.")

  public List<SeelService> getSeelServices() {
    return seelServices;
  }


  public void setSeelServices(List<SeelService> seelServices) {
    
    
    
    this.seelServices = seelServices;
  }


  public Order refunds(List<OrderRefund> refunds) {
    
    
    
    
    this.refunds = refunds;
    return this;
  }

  public Order addRefundsItem(OrderRefund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

   /**
   * The list of refunds for the order.
   * @return refunds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of refunds for the order.")

  public List<OrderRefund> getRefunds() {
    return refunds;
  }


  public void setRefunds(List<OrderRefund> refunds) {
    
    
    
    this.refunds = refunds;
  }


  public Order customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public Order extraInfo(Object extraInfo) {
    
    
    
    
    this.extraInfo = extraInfo;
    return this;
  }

   /**
   * Additional information for the order
   * @return extraInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{}", value = "Additional information for the order")

  public Object getExtraInfo() {
    return extraInfo;
  }


  public void setExtraInfo(Object extraInfo) {
    
    
    
    this.extraInfo = extraInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Order instance itself
   */
  public Order putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.orderNumber, order.orderNumber) &&
        Objects.equals(this.cartId, order.cartId) &&
        Objects.equals(this.merchantId, order.merchantId) &&
        Objects.equals(this.sessionId, order.sessionId) &&
        Objects.equals(this.deviceId, order.deviceId) &&
        Objects.equals(this.clientIp, order.clientIp) &&
        Objects.equals(this.createdTs, order.createdTs) &&
        Objects.equals(this.cancelledTs, order.cancelledTs) &&
        Objects.equals(this.updatedTs, order.updatedTs) &&
        Objects.equals(this.lineItems, order.lineItems) &&
        Objects.equals(this.shippingAddress, order.shippingAddress) &&
        Objects.equals(this.fulfillments, order.fulfillments) &&
        Objects.equals(this.seelServices, order.seelServices) &&
        Objects.equals(this.refunds, order.refunds) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.extraInfo, order.extraInfo)&&
        Objects.equals(this.additionalProperties, order.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, orderNumber, cartId, merchantId, sessionId, deviceId, clientIp, createdTs, cancelledTs, updatedTs, lineItems, shippingAddress, fulfillments, seelServices, refunds, customer, extraInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    createdTs: ").append(toIndentedString(createdTs)).append("\n");
    sb.append("    cancelledTs: ").append(toIndentedString(cancelledTs)).append("\n");
    sb.append("    updatedTs: ").append(toIndentedString(updatedTs)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    fulfillments: ").append(toIndentedString(fulfillments)).append("\n");
    sb.append("    seelServices: ").append(toIndentedString(seelServices)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("order_id");
    openapiFields.add("order_number");
    openapiFields.add("cart_id");
    openapiFields.add("merchant_id");
    openapiFields.add("session_id");
    openapiFields.add("device_id");
    openapiFields.add("client_ip");
    openapiFields.add("created_ts");
    openapiFields.add("cancelled_ts");
    openapiFields.add("updated_ts");
    openapiFields.add("line_items");
    openapiFields.add("shipping_address");
    openapiFields.add("fulfillments");
    openapiFields.add("seel_services");
    openapiFields.add("refunds");
    openapiFields.add("customer");
    openapiFields.add("extra_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Order
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("order_number") != null && !jsonObj.get("order_number").isJsonNull()) && !jsonObj.get("order_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_number").toString()));
      }
      if ((jsonObj.get("cart_id") != null && !jsonObj.get("cart_id").isJsonNull()) && !jsonObj.get("cart_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart_id").toString()));
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("client_ip") != null && !jsonObj.get("client_ip").isJsonNull()) && !jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      if (jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
          }

          // validate the optional field `line_items` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            Item.validateJsonObject(jsonArraylineItems.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("shipping_address"));
      }
      if (jsonObj.get("fulfillments") != null && !jsonObj.get("fulfillments").isJsonNull()) {
        JsonArray jsonArrayfulfillments = jsonObj.getAsJsonArray("fulfillments");
        if (jsonArrayfulfillments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fulfillments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fulfillments` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillments").toString()));
          }

          // validate the optional field `fulfillments` (array)
          for (int i = 0; i < jsonArrayfulfillments.size(); i++) {
            Fulfillment.validateJsonObject(jsonArrayfulfillments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("seel_services") != null && !jsonObj.get("seel_services").isJsonNull()) {
        JsonArray jsonArrayseelServices = jsonObj.getAsJsonArray("seel_services");
        if (jsonArrayseelServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seel_services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seel_services` to be an array in the JSON string but got `%s`", jsonObj.get("seel_services").toString()));
          }

          // validate the optional field `seel_services` (array)
          for (int i = 0; i < jsonArrayseelServices.size(); i++) {
            SeelService.validateJsonObject(jsonArrayseelServices.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            OrderRefund.validateJsonObject(jsonArrayrefunds.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Order instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Order given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Order
  * @throws IOException if the JSON string is invalid with respect to Order
  */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

 /**
  * Convert an instance of Order to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

