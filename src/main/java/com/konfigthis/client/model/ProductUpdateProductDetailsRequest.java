/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestDimensions;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestIdentifiers;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestManufacturerWarranty;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestProductAttributes;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestWeight;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProductUpdateProductDetailsRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProductUpdateProductDetailsRequest {
  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_VARIANT_ID = "variant_id";
  @SerializedName(SERIALIZED_NAME_VARIANT_ID)
  private String variantId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_TITLE = "product_title";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TITLE)
  private String productTitle;

  public static final String SERIALIZED_NAME_VARIANT_TITLE = "variant_title";
  @SerializedName(SERIALIZED_NAME_VARIANT_TITLE)
  private String variantTitle;

  public static final String SERIALIZED_NAME_BRAND_NAME = "brand_name";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_CATEGORY1 = "category_1";
  @SerializedName(SERIALIZED_NAME_CATEGORY1)
  private String category1;

  public static final String SERIALIZED_NAME_CATEGORY2 = "category_2";
  @SerializedName(SERIALIZED_NAME_CATEGORY2)
  private String category2;

  public static final String SERIALIZED_NAME_CATEGORY3 = "category_3";
  @SerializedName(SERIALIZED_NAME_CATEGORY3)
  private String category3;

  public static final String SERIALIZED_NAME_CATEGORY4 = "category_4";
  @SerializedName(SERIALIZED_NAME_CATEGORY4)
  private String category4;

  public static final String SERIALIZED_NAME_PRODUCT_DESCRIPTION = "product_description";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DESCRIPTION)
  private String productDescription;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private URI imageUrl;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_REQUIRES_SHIPPING = "requires_shipping";
  @SerializedName(SERIALIZED_NAME_REQUIRES_SHIPPING)
  private Boolean requiresShipping;

  public static final String SERIALIZED_NAME_MODEL_NUMBER = "model_number";
  @SerializedName(SERIALIZED_NAME_MODEL_NUMBER)
  private String modelNumber;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private ProductUpdateProductDetailsRequestIdentifiers identifiers;

  public static final String SERIALIZED_NAME_MANUFACTURER_WARRANTY = "manufacturer_warranty";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_WARRANTY)
  private ProductUpdateProductDetailsRequestManufacturerWarranty manufacturerWarranty;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private ProductUpdateProductDetailsRequestDimensions dimensions;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private ProductUpdateProductDetailsRequestWeight weight;

  public static final String SERIALIZED_NAME_PRODUCT_ATTRIBUTES = "product_attributes";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ATTRIBUTES)
  private ProductUpdateProductDetailsRequestProductAttributes productAttributes;

  public static final String SERIALIZED_NAME_CREATED_TS = "created_ts";
  @SerializedName(SERIALIZED_NAME_CREATED_TS)
  private OffsetDateTime createdTs;

  public static final String SERIALIZED_NAME_UPDATED_TS = "updated_ts";
  @SerializedName(SERIALIZED_NAME_UPDATED_TS)
  private OffsetDateTime updatedTs;

  public ProductUpdateProductDetailsRequest() {
  }

  public ProductUpdateProductDetailsRequest merchantId(String merchantId) {
    
    
    
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The unique identifier for the merchant within Seel&#39;s system.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "M12345", value = "The unique identifier for the merchant within Seel's system.")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    
    
    
    this.merchantId = merchantId;
  }


  public ProductUpdateProductDetailsRequest variantId(String variantId) {
    
    
    
    
    this.variantId = variantId;
    return this;
  }

   /**
   * Variant id, the unique identifier of a product SKU. Use &#39;product_id&#39; if the product doesn&#39;t have any variants.
   * @return variantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "V789", value = "Variant id, the unique identifier of a product SKU. Use 'product_id' if the product doesn't have any variants.")

  public String getVariantId() {
    return variantId;
  }


  public void setVariantId(String variantId) {
    
    
    
    this.variantId = variantId;
  }


  public ProductUpdateProductDetailsRequest productId(String productId) {
    
    
    
    
    this.productId = productId;
    return this;
  }

   /**
   * Product id.
   * @return productId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "P001", required = true, value = "Product id.")

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    
    
    
    this.productId = productId;
  }


  public ProductUpdateProductDetailsRequest productTitle(String productTitle) {
    
    
    
    
    this.productTitle = productTitle;
    return this;
  }

   /**
   * Name of the product.
   * @return productTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Example Product", required = true, value = "Name of the product.")

  public String getProductTitle() {
    return productTitle;
  }


  public void setProductTitle(String productTitle) {
    
    
    
    this.productTitle = productTitle;
  }


  public ProductUpdateProductDetailsRequest variantTitle(String variantTitle) {
    
    
    
    
    this.variantTitle = variantTitle;
    return this;
  }

   /**
   * Title of the variant.
   * @return variantTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Variant A", value = "Title of the variant.")

  public String getVariantTitle() {
    return variantTitle;
  }


  public void setVariantTitle(String variantTitle) {
    
    
    
    this.variantTitle = variantTitle;
  }


  public ProductUpdateProductDetailsRequest brandName(String brandName) {
    
    
    
    
    this.brandName = brandName;
    return this;
  }

   /**
   * The Product Brand or Vendor.
   * @return brandName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Acme", required = true, value = "The Product Brand or Vendor.")

  public String getBrandName() {
    return brandName;
  }


  public void setBrandName(String brandName) {
    
    
    
    this.brandName = brandName;
  }


  public ProductUpdateProductDetailsRequest manufacturer(String manufacturer) {
    
    
    
    
    this.manufacturer = manufacturer;
    return this;
  }

   /**
   * Manufacturer of the item.
   * @return manufacturer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Acme Corp", value = "Manufacturer of the item.")

  public String getManufacturer() {
    return manufacturer;
  }


  public void setManufacturer(String manufacturer) {
    
    
    
    this.manufacturer = manufacturer;
  }


  public ProductUpdateProductDetailsRequest category1(String category1) {
    
    
    
    
    this.category1 = category1;
    return this;
  }

   /**
   * Main product category.
   * @return category1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Electronics", value = "Main product category.")

  public String getCategory1() {
    return category1;
  }


  public void setCategory1(String category1) {
    
    
    
    this.category1 = category1;
  }


  public ProductUpdateProductDetailsRequest category2(String category2) {
    
    
    
    
    this.category2 = category2;
    return this;
  }

   /**
   * Secondary product category.
   * @return category2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Gadgets", value = "Secondary product category.")

  public String getCategory2() {
    return category2;
  }


  public void setCategory2(String category2) {
    
    
    
    this.category2 = category2;
  }


  public ProductUpdateProductDetailsRequest category3(String category3) {
    
    
    
    
    this.category3 = category3;
    return this;
  }

   /**
   * Tertiary product category.
   * @return category3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smartphones", value = "Tertiary product category.")

  public String getCategory3() {
    return category3;
  }


  public void setCategory3(String category3) {
    
    
    
    this.category3 = category3;
  }


  public ProductUpdateProductDetailsRequest category4(String category4) {
    
    
    
    
    this.category4 = category4;
    return this;
  }

   /**
   * Fourth level product category.
   * @return category4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Android", value = "Fourth level product category.")

  public String getCategory4() {
    return category4;
  }


  public void setCategory4(String category4) {
    
    
    
    this.category4 = category4;
  }


  public ProductUpdateProductDetailsRequest productDescription(String productDescription) {
    
    
    
    
    this.productDescription = productDescription;
    return this;
  }

   /**
   * Text description of the product.
   * @return productDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is an example product.", value = "Text description of the product.")

  public String getProductDescription() {
    return productDescription;
  }


  public void setProductDescription(String productDescription) {
    
    
    
    this.productDescription = productDescription;
  }


  public ProductUpdateProductDetailsRequest imageUrl(URI imageUrl) {
    
    
    
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * URL of the product image.
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/product.jpg", value = "URL of the product image.")

  public URI getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(URI imageUrl) {
    
    
    
    this.imageUrl = imageUrl;
  }


  public ProductUpdateProductDetailsRequest price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * List price of the product.
   * @return price
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "199.99", required = true, value = "List price of the product.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public ProductUpdateProductDetailsRequest currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the price (e.g. USD, EUR).
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "Currency of the price (e.g. USD, EUR).")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public ProductUpdateProductDetailsRequest requiresShipping(Boolean requiresShipping) {
    
    
    
    
    this.requiresShipping = requiresShipping;
    return this;
  }

   /**
   * Whether the product requires shipping.
   * @return requiresShipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the product requires shipping.")

  public Boolean getRequiresShipping() {
    return requiresShipping;
  }


  public void setRequiresShipping(Boolean requiresShipping) {
    
    
    
    this.requiresShipping = requiresShipping;
  }


  public ProductUpdateProductDetailsRequest modelNumber(String modelNumber) {
    
    
    
    
    this.modelNumber = modelNumber;
    return this;
  }

   /**
   * Manufacturer model number.
   * @return modelNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123XYZ", value = "Manufacturer model number.")

  public String getModelNumber() {
    return modelNumber;
  }


  public void setModelNumber(String modelNumber) {
    
    
    
    this.modelNumber = modelNumber;
  }


  public ProductUpdateProductDetailsRequest condition(String condition) {
    
    
    
    
    this.condition = condition;
    return this;
  }

   /**
   * Condition - new, used, refurbished.
   * @return condition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "new", value = "Condition - new, used, refurbished.")

  public String getCondition() {
    return condition;
  }


  public void setCondition(String condition) {
    
    
    
    this.condition = condition;
  }


  public ProductUpdateProductDetailsRequest sku(String sku) {
    
    
    
    
    this.sku = sku;
    return this;
  }

   /**
   * Stock keeping unit.
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SKU123", value = "Stock keeping unit.")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    
    
    
    this.sku = sku;
  }


  public ProductUpdateProductDetailsRequest identifiers(ProductUpdateProductDetailsRequestIdentifiers identifiers) {
    
    
    
    
    this.identifiers = identifiers;
    return this;
  }

   /**
   * Get identifiers
   * @return identifiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductUpdateProductDetailsRequestIdentifiers getIdentifiers() {
    return identifiers;
  }


  public void setIdentifiers(ProductUpdateProductDetailsRequestIdentifiers identifiers) {
    
    
    
    this.identifiers = identifiers;
  }


  public ProductUpdateProductDetailsRequest manufacturerWarranty(ProductUpdateProductDetailsRequestManufacturerWarranty manufacturerWarranty) {
    
    
    
    
    this.manufacturerWarranty = manufacturerWarranty;
    return this;
  }

   /**
   * Get manufacturerWarranty
   * @return manufacturerWarranty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductUpdateProductDetailsRequestManufacturerWarranty getManufacturerWarranty() {
    return manufacturerWarranty;
  }


  public void setManufacturerWarranty(ProductUpdateProductDetailsRequestManufacturerWarranty manufacturerWarranty) {
    
    
    
    this.manufacturerWarranty = manufacturerWarranty;
  }


  public ProductUpdateProductDetailsRequest dimensions(ProductUpdateProductDetailsRequestDimensions dimensions) {
    
    
    
    
    this.dimensions = dimensions;
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductUpdateProductDetailsRequestDimensions getDimensions() {
    return dimensions;
  }


  public void setDimensions(ProductUpdateProductDetailsRequestDimensions dimensions) {
    
    
    
    this.dimensions = dimensions;
  }


  public ProductUpdateProductDetailsRequest weight(ProductUpdateProductDetailsRequestWeight weight) {
    
    
    
    
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductUpdateProductDetailsRequestWeight getWeight() {
    return weight;
  }


  public void setWeight(ProductUpdateProductDetailsRequestWeight weight) {
    
    
    
    this.weight = weight;
  }


  public ProductUpdateProductDetailsRequest productAttributes(ProductUpdateProductDetailsRequestProductAttributes productAttributes) {
    
    
    
    
    this.productAttributes = productAttributes;
    return this;
  }

   /**
   * Get productAttributes
   * @return productAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductUpdateProductDetailsRequestProductAttributes getProductAttributes() {
    return productAttributes;
  }


  public void setProductAttributes(ProductUpdateProductDetailsRequestProductAttributes productAttributes) {
    
    
    
    this.productAttributes = productAttributes;
  }


  public ProductUpdateProductDetailsRequest createdTs(OffsetDateTime createdTs) {
    
    
    
    
    this.createdTs = createdTs;
    return this;
  }

   /**
   * Timestamp when the product was created.
   * @return createdTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-08-28T10:00Z", value = "Timestamp when the product was created.")

  public OffsetDateTime getCreatedTs() {
    return createdTs;
  }


  public void setCreatedTs(OffsetDateTime createdTs) {
    
    
    
    this.createdTs = createdTs;
  }


  public ProductUpdateProductDetailsRequest updatedTs(OffsetDateTime updatedTs) {
    
    
    
    
    this.updatedTs = updatedTs;
    return this;
  }

   /**
   * Timestamp when the product was updated.
   * @return updatedTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-08-28T12:30Z", value = "Timestamp when the product was updated.")

  public OffsetDateTime getUpdatedTs() {
    return updatedTs;
  }


  public void setUpdatedTs(OffsetDateTime updatedTs) {
    
    
    
    this.updatedTs = updatedTs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProductUpdateProductDetailsRequest instance itself
   */
  public ProductUpdateProductDetailsRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest = (ProductUpdateProductDetailsRequest) o;
    return Objects.equals(this.merchantId, productUpdateProductDetailsRequest.merchantId) &&
        Objects.equals(this.variantId, productUpdateProductDetailsRequest.variantId) &&
        Objects.equals(this.productId, productUpdateProductDetailsRequest.productId) &&
        Objects.equals(this.productTitle, productUpdateProductDetailsRequest.productTitle) &&
        Objects.equals(this.variantTitle, productUpdateProductDetailsRequest.variantTitle) &&
        Objects.equals(this.brandName, productUpdateProductDetailsRequest.brandName) &&
        Objects.equals(this.manufacturer, productUpdateProductDetailsRequest.manufacturer) &&
        Objects.equals(this.category1, productUpdateProductDetailsRequest.category1) &&
        Objects.equals(this.category2, productUpdateProductDetailsRequest.category2) &&
        Objects.equals(this.category3, productUpdateProductDetailsRequest.category3) &&
        Objects.equals(this.category4, productUpdateProductDetailsRequest.category4) &&
        Objects.equals(this.productDescription, productUpdateProductDetailsRequest.productDescription) &&
        Objects.equals(this.imageUrl, productUpdateProductDetailsRequest.imageUrl) &&
        Objects.equals(this.price, productUpdateProductDetailsRequest.price) &&
        Objects.equals(this.currency, productUpdateProductDetailsRequest.currency) &&
        Objects.equals(this.requiresShipping, productUpdateProductDetailsRequest.requiresShipping) &&
        Objects.equals(this.modelNumber, productUpdateProductDetailsRequest.modelNumber) &&
        Objects.equals(this.condition, productUpdateProductDetailsRequest.condition) &&
        Objects.equals(this.sku, productUpdateProductDetailsRequest.sku) &&
        Objects.equals(this.identifiers, productUpdateProductDetailsRequest.identifiers) &&
        Objects.equals(this.manufacturerWarranty, productUpdateProductDetailsRequest.manufacturerWarranty) &&
        Objects.equals(this.dimensions, productUpdateProductDetailsRequest.dimensions) &&
        Objects.equals(this.weight, productUpdateProductDetailsRequest.weight) &&
        Objects.equals(this.productAttributes, productUpdateProductDetailsRequest.productAttributes) &&
        Objects.equals(this.createdTs, productUpdateProductDetailsRequest.createdTs) &&
        Objects.equals(this.updatedTs, productUpdateProductDetailsRequest.updatedTs)&&
        Objects.equals(this.additionalProperties, productUpdateProductDetailsRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, variantId, productId, productTitle, variantTitle, brandName, manufacturer, category1, category2, category3, category4, productDescription, imageUrl, price, currency, requiresShipping, modelNumber, condition, sku, identifiers, manufacturerWarranty, dimensions, weight, productAttributes, createdTs, updatedTs, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductUpdateProductDetailsRequest {\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    variantId: ").append(toIndentedString(variantId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productTitle: ").append(toIndentedString(productTitle)).append("\n");
    sb.append("    variantTitle: ").append(toIndentedString(variantTitle)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    category1: ").append(toIndentedString(category1)).append("\n");
    sb.append("    category2: ").append(toIndentedString(category2)).append("\n");
    sb.append("    category3: ").append(toIndentedString(category3)).append("\n");
    sb.append("    category4: ").append(toIndentedString(category4)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    requiresShipping: ").append(toIndentedString(requiresShipping)).append("\n");
    sb.append("    modelNumber: ").append(toIndentedString(modelNumber)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    manufacturerWarranty: ").append(toIndentedString(manufacturerWarranty)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    productAttributes: ").append(toIndentedString(productAttributes)).append("\n");
    sb.append("    createdTs: ").append(toIndentedString(createdTs)).append("\n");
    sb.append("    updatedTs: ").append(toIndentedString(updatedTs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchant_id");
    openapiFields.add("variant_id");
    openapiFields.add("product_id");
    openapiFields.add("product_title");
    openapiFields.add("variant_title");
    openapiFields.add("brand_name");
    openapiFields.add("manufacturer");
    openapiFields.add("category_1");
    openapiFields.add("category_2");
    openapiFields.add("category_3");
    openapiFields.add("category_4");
    openapiFields.add("product_description");
    openapiFields.add("image_url");
    openapiFields.add("price");
    openapiFields.add("currency");
    openapiFields.add("requires_shipping");
    openapiFields.add("model_number");
    openapiFields.add("condition");
    openapiFields.add("sku");
    openapiFields.add("identifiers");
    openapiFields.add("manufacturer_warranty");
    openapiFields.add("dimensions");
    openapiFields.add("weight");
    openapiFields.add("product_attributes");
    openapiFields.add("created_ts");
    openapiFields.add("updated_ts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("product_id");
    openapiRequiredFields.add("product_title");
    openapiRequiredFields.add("brand_name");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("currency");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductUpdateProductDetailsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductUpdateProductDetailsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductUpdateProductDetailsRequest is not found in the empty JSON string", ProductUpdateProductDetailsRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductUpdateProductDetailsRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonNull()) && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if ((jsonObj.get("variant_id") != null && !jsonObj.get("variant_id").isJsonNull()) && !jsonObj.get("variant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant_id").toString()));
      }
      if (!jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      if (!jsonObj.get("product_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_title").toString()));
      }
      if ((jsonObj.get("variant_title") != null && !jsonObj.get("variant_title").isJsonNull()) && !jsonObj.get("variant_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant_title").toString()));
      }
      if (!jsonObj.get("brand_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_name").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("category_1") != null && !jsonObj.get("category_1").isJsonNull()) && !jsonObj.get("category_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_1").toString()));
      }
      if ((jsonObj.get("category_2") != null && !jsonObj.get("category_2").isJsonNull()) && !jsonObj.get("category_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_2").toString()));
      }
      if ((jsonObj.get("category_3") != null && !jsonObj.get("category_3").isJsonNull()) && !jsonObj.get("category_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_3").toString()));
      }
      if ((jsonObj.get("category_4") != null && !jsonObj.get("category_4").isJsonNull()) && !jsonObj.get("category_4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_4").toString()));
      }
      if ((jsonObj.get("product_description") != null && !jsonObj.get("product_description").isJsonNull()) && !jsonObj.get("product_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_description").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("model_number") != null && !jsonObj.get("model_number").isJsonNull()) && !jsonObj.get("model_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_number").toString()));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      // validate the optional field `identifiers`
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        ProductUpdateProductDetailsRequestIdentifiers.validateJsonObject(jsonObj.getAsJsonObject("identifiers"));
      }
      // validate the optional field `manufacturer_warranty`
      if (jsonObj.get("manufacturer_warranty") != null && !jsonObj.get("manufacturer_warranty").isJsonNull()) {
        ProductUpdateProductDetailsRequestManufacturerWarranty.validateJsonObject(jsonObj.getAsJsonObject("manufacturer_warranty"));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        ProductUpdateProductDetailsRequestDimensions.validateJsonObject(jsonObj.getAsJsonObject("dimensions"));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        ProductUpdateProductDetailsRequestWeight.validateJsonObject(jsonObj.getAsJsonObject("weight"));
      }
      // validate the optional field `product_attributes`
      if (jsonObj.get("product_attributes") != null && !jsonObj.get("product_attributes").isJsonNull()) {
        ProductUpdateProductDetailsRequestProductAttributes.validateJsonObject(jsonObj.getAsJsonObject("product_attributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductUpdateProductDetailsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductUpdateProductDetailsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductUpdateProductDetailsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductUpdateProductDetailsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductUpdateProductDetailsRequest>() {
           @Override
           public void write(JsonWriter out, ProductUpdateProductDetailsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductUpdateProductDetailsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProductUpdateProductDetailsRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductUpdateProductDetailsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductUpdateProductDetailsRequest
  * @throws IOException if the JSON string is invalid with respect to ProductUpdateProductDetailsRequest
  */
  public static ProductUpdateProductDetailsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductUpdateProductDetailsRequest.class);
  }

 /**
  * Convert an instance of ProductUpdateProductDetailsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

