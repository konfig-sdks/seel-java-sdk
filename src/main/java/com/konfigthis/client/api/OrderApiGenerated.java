/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.Order;
import com.konfigthis.client.model.OrderBatchCreateOrdersRequest;
import com.konfigthis.client.model.OrderBatchCreateOrdersResponse;
import com.konfigthis.client.model.OrderCreateNewOrderRequest;
import com.konfigthis.client.model.OrderCreateNewOrderRequestSeelServicesInner;
import com.konfigthis.client.model.OrderUpdateOrderDetailsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrderApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call batchCreateOrdersCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderBatchCreateOrdersRequest;

        // create path and map variables
        String localVarPath = "/{partner}/orders/batch"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCreateOrdersValidateBeforeCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling batchCreateOrders(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling batchCreateOrders(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling batchCreateOrders(Async)");
        }

        // verify the required parameter 'orderBatchCreateOrdersRequest' is set
        if (orderBatchCreateOrdersRequest == null) {
            throw new ApiException("Missing the required parameter 'orderBatchCreateOrdersRequest' when calling batchCreateOrders(Async)");
        }

        return batchCreateOrdersCall(xSeelAPIKey, xSeelAPIVersion, partner, orderBatchCreateOrdersRequest, _callback);

    }


    private ApiResponse<OrderBatchCreateOrdersResponse> batchCreateOrdersWithHttpInfo(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest) throws ApiException {
        okhttp3.Call localVarCall = batchCreateOrdersValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, orderBatchCreateOrdersRequest, null);
        Type localVarReturnType = new TypeToken<OrderBatchCreateOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchCreateOrdersAsync(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest, final ApiCallback<OrderBatchCreateOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCreateOrdersValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, orderBatchCreateOrdersRequest, _callback);
        Type localVarReturnType = new TypeToken<OrderBatchCreateOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchCreateOrdersRequestBuilder {
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private List<Order> orders;

        private BatchCreateOrdersRequestBuilder(String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set orders
         * @param orders The list of orders. (optional)
         * @return BatchCreateOrdersRequestBuilder
         */
        public BatchCreateOrdersRequestBuilder orders(List<Order> orders) {
            this.orders = orders;
            return this;
        }
        
        /**
         * Build call for batchCreateOrders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest = buildBodyParams();
            return batchCreateOrdersCall(xSeelAPIKey, xSeelAPIVersion, partner, orderBatchCreateOrdersRequest, _callback);
        }

        private OrderBatchCreateOrdersRequest buildBodyParams() {
            OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest = new OrderBatchCreateOrdersRequest();
            orderBatchCreateOrdersRequest.orders(this.orders);
            return orderBatchCreateOrdersRequest;
        }

        /**
         * Execute batchCreateOrders request
         * @return OrderBatchCreateOrdersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OrderBatchCreateOrdersResponse execute() throws ApiException {
            OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest = buildBodyParams();
            ApiResponse<OrderBatchCreateOrdersResponse> localVarResp = batchCreateOrdersWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, orderBatchCreateOrdersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batchCreateOrders request with HTTP info returned
         * @return ApiResponse&lt;OrderBatchCreateOrdersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrderBatchCreateOrdersResponse> executeWithHttpInfo() throws ApiException {
            OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest = buildBodyParams();
            return batchCreateOrdersWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, orderBatchCreateOrdersRequest);
        }

        /**
         * Execute batchCreateOrders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrderBatchCreateOrdersResponse> _callback) throws ApiException {
            OrderBatchCreateOrdersRequest orderBatchCreateOrdersRequest = buildBodyParams();
            return batchCreateOrdersAsync(xSeelAPIKey, xSeelAPIVersion, partner, orderBatchCreateOrdersRequest, _callback);
        }
    }

    /**
     * Batch create orders
     * 
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param orderBatchCreateOrdersRequest  (required)
     * @return BatchCreateOrdersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchCreateOrdersRequestBuilder batchCreateOrders(String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new BatchCreateOrdersRequestBuilder(xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call cancelOrderByIdCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}/cancel"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOrderByIdValidateBeforeCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelOrderById(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling cancelOrderById(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling cancelOrderById(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling cancelOrderById(Async)");
        }

        return cancelOrderByIdCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Order> cancelOrderByIdWithHttpInfo(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = cancelOrderByIdValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelOrderByIdAsync(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOrderByIdValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelOrderByIdRequestBuilder {
        private final String orderId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private CancelOrderByIdRequestBuilder(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.orderId = orderId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for cancelOrderById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelOrderByIdCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute cancelOrderById request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            ApiResponse<Order> localVarResp = cancelOrderByIdWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelOrderById request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            return cancelOrderByIdWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute cancelOrderById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            return cancelOrderByIdAsync(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Cancel an order
     * 
     * @param orderId ID of the order (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return CancelOrderByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CancelOrderByIdRequestBuilder cancelOrderById(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new CancelOrderByIdRequestBuilder(orderId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call createNewOrderCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderCreateNewOrderRequest orderCreateNewOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderCreateNewOrderRequest;

        // create path and map variables
        String localVarPath = "/{partner}/orders"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewOrderValidateBeforeCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderCreateNewOrderRequest orderCreateNewOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling createNewOrder(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling createNewOrder(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling createNewOrder(Async)");
        }

        // verify the required parameter 'orderCreateNewOrderRequest' is set
        if (orderCreateNewOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'orderCreateNewOrderRequest' when calling createNewOrder(Async)");
        }

        return createNewOrderCall(xSeelAPIKey, xSeelAPIVersion, partner, orderCreateNewOrderRequest, _callback);

    }


    private ApiResponse<Order> createNewOrderWithHttpInfo(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderCreateNewOrderRequest orderCreateNewOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewOrderValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, orderCreateNewOrderRequest, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewOrderAsync(String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderCreateNewOrderRequest orderCreateNewOrderRequest, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewOrderValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, orderCreateNewOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewOrderRequestBuilder {
        private final String orderId;
        private final String orderNumber;
        private final String sessionId;
        private final String createdTs;
        private final List<Item> lineItems;
        private final Address shippingAddress;
        private final Customer customer;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private String cartId;
        private String merchantId;
        private String deviceId;
        private String clientIp;
        private List<OrderCreateNewOrderRequestSeelServicesInner> seelServices;
        private Object extraInfo;

        private CreateNewOrderRequestBuilder(String orderId, String orderNumber, String sessionId, String createdTs, List<Item> lineItems, Address shippingAddress, Customer customer, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.orderId = orderId;
            this.orderNumber = orderNumber;
            this.sessionId = sessionId;
            this.createdTs = createdTs;
            this.lineItems = lineItems;
            this.shippingAddress = shippingAddress;
            this.customer = customer;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set cartId
         * @param cartId Cart ID of the order (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder cartId(String cartId) {
            this.cartId = cartId;
            return this;
        }
        
        /**
         * Set merchantId
         * @param merchantId Merchant ID of the order (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder merchantId(String merchantId) {
            this.merchantId = merchantId;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId The ID of the client device. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set clientIp
         * @param clientIp The IP address of the client. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder clientIp(String clientIp) {
            this.clientIp = clientIp;
            return this;
        }
        
        /**
         * Set seelServices
         * @param seelServices The list of Seel services of the order. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder seelServices(List<OrderCreateNewOrderRequestSeelServicesInner> seelServices) {
            this.seelServices = seelServices;
            return this;
        }
        
        /**
         * Set extraInfo
         * @param extraInfo Additional information for the order (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder extraInfo(Object extraInfo) {
            this.extraInfo = extraInfo;
            return this;
        }
        
        /**
         * Build call for createNewOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderCreateNewOrderRequest orderCreateNewOrderRequest = buildBodyParams();
            return createNewOrderCall(xSeelAPIKey, xSeelAPIVersion, partner, orderCreateNewOrderRequest, _callback);
        }

        private OrderCreateNewOrderRequest buildBodyParams() {
            OrderCreateNewOrderRequest orderCreateNewOrderRequest = new OrderCreateNewOrderRequest();
            orderCreateNewOrderRequest.orderId(this.orderId);
            orderCreateNewOrderRequest.orderNumber(this.orderNumber);
            orderCreateNewOrderRequest.sessionId(this.sessionId);
            orderCreateNewOrderRequest.cartId(this.cartId);
            orderCreateNewOrderRequest.merchantId(this.merchantId);
            orderCreateNewOrderRequest.deviceId(this.deviceId);
            orderCreateNewOrderRequest.clientIp(this.clientIp);
            orderCreateNewOrderRequest.createdTs(this.createdTs);
            orderCreateNewOrderRequest.lineItems(this.lineItems);
            orderCreateNewOrderRequest.shippingAddress(this.shippingAddress);
            orderCreateNewOrderRequest.customer(this.customer);
            orderCreateNewOrderRequest.seelServices(this.seelServices);
            orderCreateNewOrderRequest.extraInfo(this.extraInfo);
            return orderCreateNewOrderRequest;
        }

        /**
         * Execute createNewOrder request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            OrderCreateNewOrderRequest orderCreateNewOrderRequest = buildBodyParams();
            ApiResponse<Order> localVarResp = createNewOrderWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, orderCreateNewOrderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewOrder request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            OrderCreateNewOrderRequest orderCreateNewOrderRequest = buildBodyParams();
            return createNewOrderWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, orderCreateNewOrderRequest);
        }

        /**
         * Execute createNewOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            OrderCreateNewOrderRequest orderCreateNewOrderRequest = buildBodyParams();
            return createNewOrderAsync(xSeelAPIKey, xSeelAPIVersion, partner, orderCreateNewOrderRequest, _callback);
        }
    }

    /**
     * Create an order
     * 
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param orderCreateNewOrderRequest  (required)
     * @return CreateNewOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewOrderRequestBuilder createNewOrder(String orderId, String orderNumber, String sessionId, String createdTs, List<Item> lineItems, Address shippingAddress, Customer customer, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (orderNumber == null) throw new IllegalArgumentException("\"orderNumber\" is required but got null");
            

        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        if (createdTs == null) throw new IllegalArgumentException("\"createdTs\" is required but got null");
            

        if (lineItems == null) throw new IllegalArgumentException("\"lineItems\" is required but got null");
        if (shippingAddress == null) throw new IllegalArgumentException("\"shippingAddress\" is required but got null");
        if (customer == null) throw new IllegalArgumentException("\"customer\" is required but got null");
        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new CreateNewOrderRequestBuilder(orderId, orderNumber, sessionId, createdTs, lineItems, shippingAddress, customer, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call getByIdCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getById(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling getById(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling getById(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling getById(Async)");
        }

        return getByIdCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Order> getByIdWithHttpInfo(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orderId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private GetByIdRequestBuilder(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.orderId = orderId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get an order </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute getById request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get an order </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            ApiResponse<Order> localVarResp = getByIdWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get an order </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get an order </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            return getByIdAsync(orderId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Get an order
     * 
     * @param orderId ID of the order (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an order </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new GetByIdRequestBuilder(orderId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call updateOrderDetailsCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderUpdateOrderDetailsRequest;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderDetailsValidateBeforeCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling updateOrderDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling updateOrderDetails(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling updateOrderDetails(Async)");
        }

        // verify the required parameter 'orderUpdateOrderDetailsRequest' is set
        if (orderUpdateOrderDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'orderUpdateOrderDetailsRequest' when calling updateOrderDetails(Async)");
        }

        return updateOrderDetailsCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, orderUpdateOrderDetailsRequest, _callback);

    }


    private ApiResponse<Order> updateOrderDetailsWithHttpInfo(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrderDetailsValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, orderUpdateOrderDetailsRequest, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrderDetailsAsync(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderDetailsValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, orderUpdateOrderDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOrderDetailsRequestBuilder {
        private final String updatedTs;
        private final String orderId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private List<Item> lineItems;
        private Address shippingAddress;
        private Customer customer;
        private Object extraInfo;

        private UpdateOrderDetailsRequestBuilder(String updatedTs, String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.updatedTs = updatedTs;
            this.orderId = orderId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set lineItems
         * @param lineItems The list of items included in the order. (optional)
         * @return UpdateOrderDetailsRequestBuilder
         */
        public UpdateOrderDetailsRequestBuilder lineItems(List<Item> lineItems) {
            this.lineItems = lineItems;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return UpdateOrderDetailsRequestBuilder
         */
        public UpdateOrderDetailsRequestBuilder shippingAddress(Address shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Set customer
         * @param customer  (optional)
         * @return UpdateOrderDetailsRequestBuilder
         */
        public UpdateOrderDetailsRequestBuilder customer(Customer customer) {
            this.customer = customer;
            return this;
        }
        
        /**
         * Set extraInfo
         * @param extraInfo Additional information for the order (optional)
         * @return UpdateOrderDetailsRequestBuilder
         */
        public UpdateOrderDetailsRequestBuilder extraInfo(Object extraInfo) {
            this.extraInfo = extraInfo;
            return this;
        }
        
        /**
         * Build call for updateOrderDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest = buildBodyParams();
            return updateOrderDetailsCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, orderUpdateOrderDetailsRequest, _callback);
        }

        private OrderUpdateOrderDetailsRequest buildBodyParams() {
            OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest = new OrderUpdateOrderDetailsRequest();
            orderUpdateOrderDetailsRequest.updatedTs(this.updatedTs);
            orderUpdateOrderDetailsRequest.lineItems(this.lineItems);
            orderUpdateOrderDetailsRequest.shippingAddress(this.shippingAddress);
            orderUpdateOrderDetailsRequest.customer(this.customer);
            orderUpdateOrderDetailsRequest.extraInfo(this.extraInfo);
            return orderUpdateOrderDetailsRequest;
        }

        /**
         * Execute updateOrderDetails request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest = buildBodyParams();
            ApiResponse<Order> localVarResp = updateOrderDetailsWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner, orderUpdateOrderDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOrderDetails request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest = buildBodyParams();
            return updateOrderDetailsWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner, orderUpdateOrderDetailsRequest);
        }

        /**
         * Execute updateOrderDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            OrderUpdateOrderDetailsRequest orderUpdateOrderDetailsRequest = buildBodyParams();
            return updateOrderDetailsAsync(orderId, xSeelAPIKey, xSeelAPIVersion, partner, orderUpdateOrderDetailsRequest, _callback);
        }
    }

    /**
     * Update an order
     * 
     * @param orderId ID of the order (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param orderUpdateOrderDetailsRequest  (required)
     * @return UpdateOrderDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrderDetailsRequestBuilder updateOrderDetails(String updatedTs, String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (updatedTs == null) throw new IllegalArgumentException("\"updatedTs\" is required but got null");
            

        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new UpdateOrderDetailsRequestBuilder(updatedTs, orderId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
}
