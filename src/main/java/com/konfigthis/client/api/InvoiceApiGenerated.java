/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Invoice;
import com.konfigthis.client.model.InvoiceListInvoicesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoiceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoiceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInvoiceByIdCall(String invoiceId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/invoices/{invoice_id}"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceByIdValidateBeforeCall(String invoiceId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getInvoiceById(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling getInvoiceById(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling getInvoiceById(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling getInvoiceById(Async)");
        }

        return getInvoiceByIdCall(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Invoice> getInvoiceByIdWithHttpInfo(String invoiceId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceByIdValidateBeforeCall(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInvoiceByIdAsync(String invoiceId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceByIdValidateBeforeCall(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInvoiceByIdRequestBuilder {
        private final String invoiceId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private GetInvoiceByIdRequestBuilder(String invoiceId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.invoiceId = invoiceId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for getInvoiceById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInvoiceByIdCall(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute getInvoiceById request
         * @return Invoice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Invoice execute() throws ApiException {
            ApiResponse<Invoice> localVarResp = getInvoiceByIdWithHttpInfo(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInvoiceById request with HTTP info returned
         * @return ApiResponse&lt;Invoice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Invoice> executeWithHttpInfo() throws ApiException {
            return getInvoiceByIdWithHttpInfo(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute getInvoiceById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Invoice> _callback) throws ApiException {
            return getInvoiceByIdAsync(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Get an invoice
     * 
     * @param invoiceId ID of the invoice (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return GetInvoiceByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetInvoiceByIdRequestBuilder getInvoiceById(String invoiceId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new GetInvoiceByIdRequestBuilder(invoiceId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call listInvoicesCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/invoices"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvoicesValidateBeforeCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling listInvoices(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling listInvoices(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling listInvoices(Async)");
        }

        return listInvoicesCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);

    }


    private ApiResponse<InvoiceListInvoicesResponse> listInvoicesWithHttpInfo(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listInvoicesValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, null);
        Type localVarReturnType = new TypeToken<InvoiceListInvoicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInvoicesAsync(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback<InvoiceListInvoicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvoicesValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<InvoiceListInvoicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInvoicesRequestBuilder {
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private Integer page;
        private Integer pageSize;

        private ListInvoicesRequestBuilder(String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set page
         * @param page Query by page, default 0 (optional, default to 0)
         * @return ListInvoicesRequestBuilder
         */
        public ListInvoicesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Query by page_size, default 100 (optional, default to 100)
         * @return ListInvoicesRequestBuilder
         */
        public ListInvoicesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listInvoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInvoicesCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        }


        /**
         * Execute listInvoices request
         * @return InvoiceListInvoicesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceListInvoicesResponse execute() throws ApiException {
            ApiResponse<InvoiceListInvoicesResponse> localVarResp = listInvoicesWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInvoices request with HTTP info returned
         * @return ApiResponse&lt;InvoiceListInvoicesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceListInvoicesResponse> executeWithHttpInfo() throws ApiException {
            return listInvoicesWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize);
        }

        /**
         * Execute listInvoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceListInvoicesResponse> _callback) throws ApiException {
            return listInvoicesAsync(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        }
    }

    /**
     * List invoices
     * 
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return ListInvoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListInvoicesRequestBuilder listInvoices(String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new ListInvoicesRequestBuilder(xSeelAPIKey, xSeelAPIVersion, partner);
    }
}
