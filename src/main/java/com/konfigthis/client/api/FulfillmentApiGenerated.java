/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Fulfillment;
import com.konfigthis.client.model.FulfillmentLineItemsInner;
import com.konfigthis.client.model.FulfillmentListFulfillmentsResponse;
import com.konfigthis.client.model.FulfillmentUpdateFulfillmentDetailsRequest;
import com.konfigthis.client.model.FulfillmentUpdateFulfillmentDetailsRequestLineItemsInner;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FulfillmentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FulfillmentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelFulfillmentCall(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}/cancel"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "fulfillment_id" + "}", localVarApiClient.escapeString(fulfillmentId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelFulfillmentValidateBeforeCall(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelFulfillment(Async)");
        }

        // verify the required parameter 'fulfillmentId' is set
        if (fulfillmentId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentId' when calling cancelFulfillment(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling cancelFulfillment(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling cancelFulfillment(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling cancelFulfillment(Async)");
        }

        return cancelFulfillmentCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Fulfillment> cancelFulfillmentWithHttpInfo(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = cancelFulfillmentValidateBeforeCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelFulfillmentAsync(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Fulfillment> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelFulfillmentValidateBeforeCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelFulfillmentRequestBuilder {
        private final String orderId;
        private final String fulfillmentId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private CancelFulfillmentRequestBuilder(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.orderId = orderId;
            this.fulfillmentId = fulfillmentId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for cancelFulfillment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelFulfillmentCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute cancelFulfillment request
         * @return Fulfillment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Fulfillment execute() throws ApiException {
            ApiResponse<Fulfillment> localVarResp = cancelFulfillmentWithHttpInfo(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelFulfillment request with HTTP info returned
         * @return ApiResponse&lt;Fulfillment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fulfillment> executeWithHttpInfo() throws ApiException {
            return cancelFulfillmentWithHttpInfo(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute cancelFulfillment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fulfillment> _callback) throws ApiException {
            return cancelFulfillmentAsync(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Cancel a fulfillment
     * 
     * @param orderId ID of the order (required)
     * @param fulfillmentId ID of the fulfillment (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return CancelFulfillmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CancelFulfillmentRequestBuilder cancelFulfillment(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (fulfillmentId == null) throw new IllegalArgumentException("\"fulfillmentId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new CancelFulfillmentRequestBuilder(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call createNewFulfillmentCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Fulfillment fulfillment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fulfillment;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}/fulfillments"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFulfillmentValidateBeforeCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Fulfillment fulfillment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createNewFulfillment(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling createNewFulfillment(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling createNewFulfillment(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling createNewFulfillment(Async)");
        }

        // verify the required parameter 'fulfillment' is set
        if (fulfillment == null) {
            throw new ApiException("Missing the required parameter 'fulfillment' when calling createNewFulfillment(Async)");
        }

        return createNewFulfillmentCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillment, _callback);

    }


    private ApiResponse<Fulfillment> createNewFulfillmentWithHttpInfo(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Fulfillment fulfillment) throws ApiException {
        okhttp3.Call localVarCall = createNewFulfillmentValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillment, null);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFulfillmentAsync(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Fulfillment fulfillment, final ApiCallback<Fulfillment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFulfillmentValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillment, _callback);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFulfillmentRequestBuilder {
        private final String fulfillmentId;
        private final OffsetDateTime createdTs;
        private final OffsetDateTime updatedTs;
        private final String trackingNumber;
        private final String carrier;
        private final String shipmentStatus;
        private final List<FulfillmentLineItemsInner> lineItems;
        private final String orderId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private String trackingUrl;

        private CreateNewFulfillmentRequestBuilder(String fulfillmentId, OffsetDateTime createdTs, OffsetDateTime updatedTs, String trackingNumber, String carrier, String shipmentStatus, List<FulfillmentLineItemsInner> lineItems, String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.fulfillmentId = fulfillmentId;
            this.createdTs = createdTs;
            this.updatedTs = updatedTs;
            this.trackingNumber = trackingNumber;
            this.carrier = carrier;
            this.shipmentStatus = shipmentStatus;
            this.lineItems = lineItems;
            this.orderId = orderId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set trackingUrl
         * @param trackingUrl The tracking url of the fulfillment (optional)
         * @return CreateNewFulfillmentRequestBuilder
         */
        public CreateNewFulfillmentRequestBuilder trackingUrl(String trackingUrl) {
            this.trackingUrl = trackingUrl;
            return this;
        }
        
        /**
         * Build call for createNewFulfillment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Fulfillment fulfillment = buildBodyParams();
            return createNewFulfillmentCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillment, _callback);
        }

        private Fulfillment buildBodyParams() {
            Fulfillment fulfillment = new Fulfillment();
            fulfillment.fulfillmentId(this.fulfillmentId);
            fulfillment.createdTs(this.createdTs);
            fulfillment.updatedTs(this.updatedTs);
            fulfillment.trackingNumber(this.trackingNumber);
            fulfillment.carrier(this.carrier);
            fulfillment.trackingUrl(this.trackingUrl);
            if (this.shipmentStatus != null)
            fulfillment.shipmentStatus(Fulfillment.ShipmentStatusEnum.fromValue(this.shipmentStatus));
            fulfillment.lineItems(this.lineItems);
            return fulfillment;
        }

        /**
         * Execute createNewFulfillment request
         * @return Fulfillment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Fulfillment execute() throws ApiException {
            Fulfillment fulfillment = buildBodyParams();
            ApiResponse<Fulfillment> localVarResp = createNewFulfillmentWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewFulfillment request with HTTP info returned
         * @return ApiResponse&lt;Fulfillment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fulfillment> executeWithHttpInfo() throws ApiException {
            Fulfillment fulfillment = buildBodyParams();
            return createNewFulfillmentWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillment);
        }

        /**
         * Execute createNewFulfillment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fulfillment> _callback) throws ApiException {
            Fulfillment fulfillment = buildBodyParams();
            return createNewFulfillmentAsync(orderId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillment, _callback);
        }
    }

    /**
     * Create a fulfillment
     * 
     * @param orderId ID of the order (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param fulfillment  (required)
     * @return CreateNewFulfillmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFulfillmentRequestBuilder createNewFulfillment(String fulfillmentId, OffsetDateTime createdTs, OffsetDateTime updatedTs, String trackingNumber, String carrier, String shipmentStatus, List<FulfillmentLineItemsInner> lineItems, String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (fulfillmentId == null) throw new IllegalArgumentException("\"fulfillmentId\" is required but got null");
            

        if (createdTs == null) throw new IllegalArgumentException("\"createdTs\" is required but got null");
        if (updatedTs == null) throw new IllegalArgumentException("\"updatedTs\" is required but got null");
        if (trackingNumber == null) throw new IllegalArgumentException("\"trackingNumber\" is required but got null");
            

        if (carrier == null) throw new IllegalArgumentException("\"carrier\" is required but got null");
            

        if (shipmentStatus == null) throw new IllegalArgumentException("\"shipmentStatus\" is required but got null");
            

        if (lineItems == null) throw new IllegalArgumentException("\"lineItems\" is required but got null");
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new CreateNewFulfillmentRequestBuilder(fulfillmentId, createdTs, updatedTs, trackingNumber, carrier, shipmentStatus, lineItems, orderId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call getDetailsCall(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "fulfillment_id" + "}", localVarApiClient.escapeString(fulfillmentId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getDetails(Async)");
        }

        // verify the required parameter 'fulfillmentId' is set
        if (fulfillmentId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentId' when calling getDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling getDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling getDetails(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling getDetails(Async)");
        }

        return getDetailsCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Fulfillment> getDetailsWithHttpInfo(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Fulfillment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String orderId;
        private final String fulfillmentId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private GetDetailsRequestBuilder(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.orderId = orderId;
            this.fulfillmentId = fulfillmentId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute getDetails request
         * @return Fulfillment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Fulfillment execute() throws ApiException {
            ApiResponse<Fulfillment> localVarResp = getDetailsWithHttpInfo(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;Fulfillment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fulfillment> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fulfillment> _callback) throws ApiException {
            return getDetailsAsync(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Get a fulfillment
     * 
     * @param orderId ID of the order (required)
     * @param fulfillmentId ID of the fulfillment (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (fulfillmentId == null) throw new IllegalArgumentException("\"fulfillmentId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new GetDetailsRequestBuilder(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call listFulfillmentsCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}/fulfillments"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFulfillmentsValidateBeforeCall(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling listFulfillments(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling listFulfillments(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling listFulfillments(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling listFulfillments(Async)");
        }

        return listFulfillmentsCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);

    }


    private ApiResponse<FulfillmentListFulfillmentsResponse> listFulfillmentsWithHttpInfo(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listFulfillmentsValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, null);
        Type localVarReturnType = new TypeToken<FulfillmentListFulfillmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFulfillmentsAsync(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback<FulfillmentListFulfillmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFulfillmentsValidateBeforeCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<FulfillmentListFulfillmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFulfillmentsRequestBuilder {
        private final String orderId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private Integer page;
        private Integer pageSize;

        private ListFulfillmentsRequestBuilder(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.orderId = orderId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set page
         * @param page Query by page, default 0 (optional, default to 0)
         * @return ListFulfillmentsRequestBuilder
         */
        public ListFulfillmentsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Query by page_size, default 100 (optional, default to 100)
         * @return ListFulfillmentsRequestBuilder
         */
        public ListFulfillmentsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listFulfillments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFulfillmentsCall(orderId, xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        }


        /**
         * Execute listFulfillments request
         * @return FulfillmentListFulfillmentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public FulfillmentListFulfillmentsResponse execute() throws ApiException {
            ApiResponse<FulfillmentListFulfillmentsResponse> localVarResp = listFulfillmentsWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFulfillments request with HTTP info returned
         * @return ApiResponse&lt;FulfillmentListFulfillmentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FulfillmentListFulfillmentsResponse> executeWithHttpInfo() throws ApiException {
            return listFulfillmentsWithHttpInfo(orderId, xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize);
        }

        /**
         * Execute listFulfillments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FulfillmentListFulfillmentsResponse> _callback) throws ApiException {
            return listFulfillmentsAsync(orderId, xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        }
    }

    /**
     * List fulfillments
     * 
     * @param orderId ID of the order (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return ListFulfillmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListFulfillmentsRequestBuilder listFulfillments(String orderId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new ListFulfillmentsRequestBuilder(orderId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call updateFulfillmentDetailsCall(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fulfillmentUpdateFulfillmentDetailsRequest;

        // create path and map variables
        String localVarPath = "/{partner}/orders/{order_id}/fulfillments/{fulfillment_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "fulfillment_id" + "}", localVarApiClient.escapeString(fulfillmentId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFulfillmentDetailsValidateBeforeCall(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateFulfillmentDetails(Async)");
        }

        // verify the required parameter 'fulfillmentId' is set
        if (fulfillmentId == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentId' when calling updateFulfillmentDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling updateFulfillmentDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling updateFulfillmentDetails(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling updateFulfillmentDetails(Async)");
        }

        // verify the required parameter 'fulfillmentUpdateFulfillmentDetailsRequest' is set
        if (fulfillmentUpdateFulfillmentDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentUpdateFulfillmentDetailsRequest' when calling updateFulfillmentDetails(Async)");
        }

        return updateFulfillmentDetailsCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillmentUpdateFulfillmentDetailsRequest, _callback);

    }


    private ApiResponse<Fulfillment> updateFulfillmentDetailsWithHttpInfo(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFulfillmentDetailsValidateBeforeCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillmentUpdateFulfillmentDetailsRequest, null);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFulfillmentDetailsAsync(String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner, FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest, final ApiCallback<Fulfillment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFulfillmentDetailsValidateBeforeCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillmentUpdateFulfillmentDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<Fulfillment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFulfillmentDetailsRequestBuilder {
        private final OffsetDateTime updatedTs;
        private final String trackingNumber;
        private final String carrier;
        private final String shipmentStatus;
        private final List<FulfillmentUpdateFulfillmentDetailsRequestLineItemsInner> lineItems;
        private final String orderId;
        private final String fulfillmentId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private String trackingUrl;

        private UpdateFulfillmentDetailsRequestBuilder(OffsetDateTime updatedTs, String trackingNumber, String carrier, String shipmentStatus, List<FulfillmentUpdateFulfillmentDetailsRequestLineItemsInner> lineItems, String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.updatedTs = updatedTs;
            this.trackingNumber = trackingNumber;
            this.carrier = carrier;
            this.shipmentStatus = shipmentStatus;
            this.lineItems = lineItems;
            this.orderId = orderId;
            this.fulfillmentId = fulfillmentId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set trackingUrl
         * @param trackingUrl The tracking url of the fulfillment (optional)
         * @return UpdateFulfillmentDetailsRequestBuilder
         */
        public UpdateFulfillmentDetailsRequestBuilder trackingUrl(String trackingUrl) {
            this.trackingUrl = trackingUrl;
            return this;
        }
        
        /**
         * Build call for updateFulfillmentDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest = buildBodyParams();
            return updateFulfillmentDetailsCall(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillmentUpdateFulfillmentDetailsRequest, _callback);
        }

        private FulfillmentUpdateFulfillmentDetailsRequest buildBodyParams() {
            FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest = new FulfillmentUpdateFulfillmentDetailsRequest();
            fulfillmentUpdateFulfillmentDetailsRequest.updatedTs(this.updatedTs);
            fulfillmentUpdateFulfillmentDetailsRequest.trackingNumber(this.trackingNumber);
            fulfillmentUpdateFulfillmentDetailsRequest.carrier(this.carrier);
            fulfillmentUpdateFulfillmentDetailsRequest.trackingUrl(this.trackingUrl);
            if (this.shipmentStatus != null)
            fulfillmentUpdateFulfillmentDetailsRequest.shipmentStatus(FulfillmentUpdateFulfillmentDetailsRequest.ShipmentStatusEnum.fromValue(this.shipmentStatus));
            fulfillmentUpdateFulfillmentDetailsRequest.lineItems(this.lineItems);
            return fulfillmentUpdateFulfillmentDetailsRequest;
        }

        /**
         * Execute updateFulfillmentDetails request
         * @return Fulfillment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Fulfillment execute() throws ApiException {
            FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest = buildBodyParams();
            ApiResponse<Fulfillment> localVarResp = updateFulfillmentDetailsWithHttpInfo(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillmentUpdateFulfillmentDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFulfillmentDetails request with HTTP info returned
         * @return ApiResponse&lt;Fulfillment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Fulfillment> executeWithHttpInfo() throws ApiException {
            FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest = buildBodyParams();
            return updateFulfillmentDetailsWithHttpInfo(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillmentUpdateFulfillmentDetailsRequest);
        }

        /**
         * Execute updateFulfillmentDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Fulfillment> _callback) throws ApiException {
            FulfillmentUpdateFulfillmentDetailsRequest fulfillmentUpdateFulfillmentDetailsRequest = buildBodyParams();
            return updateFulfillmentDetailsAsync(orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner, fulfillmentUpdateFulfillmentDetailsRequest, _callback);
        }
    }

    /**
     * Update a fulfillment
     * 
     * @param orderId ID of the order (required)
     * @param fulfillmentId ID of the fulfillment (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param fulfillmentUpdateFulfillmentDetailsRequest  (required)
     * @return UpdateFulfillmentDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFulfillmentDetailsRequestBuilder updateFulfillmentDetails(OffsetDateTime updatedTs, String trackingNumber, String carrier, String shipmentStatus, List<FulfillmentUpdateFulfillmentDetailsRequestLineItemsInner> lineItems, String orderId, String fulfillmentId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (updatedTs == null) throw new IllegalArgumentException("\"updatedTs\" is required but got null");
        if (trackingNumber == null) throw new IllegalArgumentException("\"trackingNumber\" is required but got null");
            

        if (carrier == null) throw new IllegalArgumentException("\"carrier\" is required but got null");
            

        if (shipmentStatus == null) throw new IllegalArgumentException("\"shipmentStatus\" is required but got null");
            

        if (lineItems == null) throw new IllegalArgumentException("\"lineItems\" is required but got null");
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        if (fulfillmentId == null) throw new IllegalArgumentException("\"fulfillmentId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new UpdateFulfillmentDetailsRequestBuilder(updatedTs, trackingNumber, carrier, shipmentStatus, lineItems, orderId, fulfillmentId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
}
