/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.Product;
import com.konfigthis.client.model.ProductAddNewProductRequest;
import com.konfigthis.client.model.ProductAddNewProductRequestDimensions;
import com.konfigthis.client.model.ProductAddNewProductRequestIdentifiers;
import com.konfigthis.client.model.ProductAddNewProductRequestManufacturerWarranty;
import com.konfigthis.client.model.ProductAddNewProductRequestProductAttributes;
import com.konfigthis.client.model.ProductAddNewProductRequestWeight;
import com.konfigthis.client.model.ProductBatchCreateProductsRequest;
import com.konfigthis.client.model.ProductBatchCreateProductsResponse;
import com.konfigthis.client.model.ProductPlan;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequest;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestDimensions;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestIdentifiers;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestManufacturerWarranty;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestProductAttributes;
import com.konfigthis.client.model.ProductUpdateProductDetailsRequestWeight;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewProductCall(String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductAddNewProductRequest productAddNewProductRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productAddNewProductRequest;

        // create path and map variables
        String localVarPath = "/{partner}/products"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewProductValidateBeforeCall(String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductAddNewProductRequest productAddNewProductRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling addNewProduct(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling addNewProduct(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling addNewProduct(Async)");
        }

        // verify the required parameter 'productAddNewProductRequest' is set
        if (productAddNewProductRequest == null) {
            throw new ApiException("Missing the required parameter 'productAddNewProductRequest' when calling addNewProduct(Async)");
        }

        return addNewProductCall(partner, xSeelAPIKey, xSeelAPIVersion, productAddNewProductRequest, _callback);

    }


    private ApiResponse<Product> addNewProductWithHttpInfo(String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductAddNewProductRequest productAddNewProductRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewProductValidateBeforeCall(partner, xSeelAPIKey, xSeelAPIVersion, productAddNewProductRequest, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewProductAsync(String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductAddNewProductRequest productAddNewProductRequest, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewProductValidateBeforeCall(partner, xSeelAPIKey, xSeelAPIVersion, productAddNewProductRequest, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewProductRequestBuilder {
        private final String productId;
        private final String productTitle;
        private final String brandName;
        private final Double price;
        private final String currency;
        private final String partner;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private String merchantId;
        private String variantId;
        private String variantTitle;
        private String manufacturer;
        private String category1;
        private String category2;
        private String category3;
        private String category4;
        private String productDescription;
        private URI imageUrl;
        private Boolean requiresShipping;
        private String modelNumber;
        private String condition;
        private String sku;
        private ProductAddNewProductRequestIdentifiers identifiers;
        private ProductAddNewProductRequestManufacturerWarranty manufacturerWarranty;
        private ProductAddNewProductRequestDimensions dimensions;
        private ProductAddNewProductRequestWeight weight;
        private ProductAddNewProductRequestProductAttributes productAttributes;
        private OffsetDateTime createdTs;
        private OffsetDateTime updatedTs;

        private AddNewProductRequestBuilder(String productId, String productTitle, String brandName, Double price, String currency, String partner, String xSeelAPIKey, String xSeelAPIVersion) {
            this.productId = productId;
            this.productTitle = productTitle;
            this.brandName = brandName;
            this.price = price;
            this.currency = currency;
            this.partner = partner;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
        }

        /**
         * Set merchantId
         * @param merchantId The unique identifier for the merchant within Seel&#39;s system. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder merchantId(String merchantId) {
            this.merchantId = merchantId;
            return this;
        }
        
        /**
         * Set variantId
         * @param variantId Variant id, the unique identifier of a product SKU. Use &#39;product_id&#39; if the product doesn&#39;t have any variants. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder variantId(String variantId) {
            this.variantId = variantId;
            return this;
        }
        
        /**
         * Set variantTitle
         * @param variantTitle Title of the variant. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder variantTitle(String variantTitle) {
            this.variantTitle = variantTitle;
            return this;
        }
        
        /**
         * Set manufacturer
         * @param manufacturer Manufacturer of the item. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder manufacturer(String manufacturer) {
            this.manufacturer = manufacturer;
            return this;
        }
        
        /**
         * Set category1
         * @param category1 Main product category. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder category1(String category1) {
            this.category1 = category1;
            return this;
        }
        
        /**
         * Set category2
         * @param category2 Secondary product category. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder category2(String category2) {
            this.category2 = category2;
            return this;
        }
        
        /**
         * Set category3
         * @param category3 Tertiary product category. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder category3(String category3) {
            this.category3 = category3;
            return this;
        }
        
        /**
         * Set category4
         * @param category4 Fourth level product category. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder category4(String category4) {
            this.category4 = category4;
            return this;
        }
        
        /**
         * Set productDescription
         * @param productDescription Text description of the product. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder productDescription(String productDescription) {
            this.productDescription = productDescription;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl URL of the product image. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder imageUrl(URI imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set requiresShipping
         * @param requiresShipping Whether the product requires shipping. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder requiresShipping(Boolean requiresShipping) {
            this.requiresShipping = requiresShipping;
            return this;
        }
        
        /**
         * Set modelNumber
         * @param modelNumber Manufacturer model number. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder modelNumber(String modelNumber) {
            this.modelNumber = modelNumber;
            return this;
        }
        
        /**
         * Set condition
         * @param condition Condition - new, used, refurbished. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder condition(String condition) {
            this.condition = condition;
            return this;
        }
        
        /**
         * Set sku
         * @param sku Stock keeping unit. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Set identifiers
         * @param identifiers  (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder identifiers(ProductAddNewProductRequestIdentifiers identifiers) {
            this.identifiers = identifiers;
            return this;
        }
        
        /**
         * Set manufacturerWarranty
         * @param manufacturerWarranty  (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder manufacturerWarranty(ProductAddNewProductRequestManufacturerWarranty manufacturerWarranty) {
            this.manufacturerWarranty = manufacturerWarranty;
            return this;
        }
        
        /**
         * Set dimensions
         * @param dimensions  (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder dimensions(ProductAddNewProductRequestDimensions dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        
        /**
         * Set weight
         * @param weight  (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder weight(ProductAddNewProductRequestWeight weight) {
            this.weight = weight;
            return this;
        }
        
        /**
         * Set productAttributes
         * @param productAttributes  (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder productAttributes(ProductAddNewProductRequestProductAttributes productAttributes) {
            this.productAttributes = productAttributes;
            return this;
        }
        
        /**
         * Set createdTs
         * @param createdTs Timestamp when the product was created. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder createdTs(OffsetDateTime createdTs) {
            this.createdTs = createdTs;
            return this;
        }
        
        /**
         * Set updatedTs
         * @param updatedTs Timestamp when the product was updated. (optional)
         * @return AddNewProductRequestBuilder
         */
        public AddNewProductRequestBuilder updatedTs(OffsetDateTime updatedTs) {
            this.updatedTs = updatedTs;
            return this;
        }
        
        /**
         * Build call for addNewProduct
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductAddNewProductRequest productAddNewProductRequest = buildBodyParams();
            return addNewProductCall(partner, xSeelAPIKey, xSeelAPIVersion, productAddNewProductRequest, _callback);
        }

        private ProductAddNewProductRequest buildBodyParams() {
            ProductAddNewProductRequest productAddNewProductRequest = new ProductAddNewProductRequest();
            productAddNewProductRequest.merchantId(this.merchantId);
            productAddNewProductRequest.variantId(this.variantId);
            productAddNewProductRequest.productId(this.productId);
            productAddNewProductRequest.productTitle(this.productTitle);
            productAddNewProductRequest.variantTitle(this.variantTitle);
            productAddNewProductRequest.brandName(this.brandName);
            productAddNewProductRequest.manufacturer(this.manufacturer);
            productAddNewProductRequest.category1(this.category1);
            productAddNewProductRequest.category2(this.category2);
            productAddNewProductRequest.category3(this.category3);
            productAddNewProductRequest.category4(this.category4);
            productAddNewProductRequest.productDescription(this.productDescription);
            productAddNewProductRequest.imageUrl(this.imageUrl);
            productAddNewProductRequest.price(this.price);
            productAddNewProductRequest.currency(this.currency);
            productAddNewProductRequest.requiresShipping(this.requiresShipping);
            productAddNewProductRequest.modelNumber(this.modelNumber);
            productAddNewProductRequest.condition(this.condition);
            productAddNewProductRequest.sku(this.sku);
            productAddNewProductRequest.identifiers(this.identifiers);
            productAddNewProductRequest.manufacturerWarranty(this.manufacturerWarranty);
            productAddNewProductRequest.dimensions(this.dimensions);
            productAddNewProductRequest.weight(this.weight);
            productAddNewProductRequest.productAttributes(this.productAttributes);
            productAddNewProductRequest.createdTs(this.createdTs);
            productAddNewProductRequest.updatedTs(this.updatedTs);
            return productAddNewProductRequest;
        }

        /**
         * Execute addNewProduct request
         * @return Product
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Product execute() throws ApiException {
            ProductAddNewProductRequest productAddNewProductRequest = buildBodyParams();
            ApiResponse<Product> localVarResp = addNewProductWithHttpInfo(partner, xSeelAPIKey, xSeelAPIVersion, productAddNewProductRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewProduct request with HTTP info returned
         * @return ApiResponse&lt;Product&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Product> executeWithHttpInfo() throws ApiException {
            ProductAddNewProductRequest productAddNewProductRequest = buildBodyParams();
            return addNewProductWithHttpInfo(partner, xSeelAPIKey, xSeelAPIVersion, productAddNewProductRequest);
        }

        /**
         * Execute addNewProduct request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Product> _callback) throws ApiException {
            ProductAddNewProductRequest productAddNewProductRequest = buildBodyParams();
            return addNewProductAsync(partner, xSeelAPIKey, xSeelAPIVersion, productAddNewProductRequest, _callback);
        }
    }

    /**
     * Create a product
     * 
     * @param partner partner name (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param productAddNewProductRequest  (required)
     * @return AddNewProductRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddNewProductRequestBuilder addNewProduct(String productId, String productTitle, String brandName, Double price, String currency, String partner, String xSeelAPIKey, String xSeelAPIVersion) throws IllegalArgumentException {
        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (productTitle == null) throw new IllegalArgumentException("\"productTitle\" is required but got null");
            

        if (brandName == null) throw new IllegalArgumentException("\"brandName\" is required but got null");
            

        if (price == null) throw new IllegalArgumentException("\"price\" is required but got null");
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        return new AddNewProductRequestBuilder(productId, productTitle, brandName, price, currency, partner, xSeelAPIKey, xSeelAPIVersion);
    }
    private okhttp3.Call batchCreateProductsCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, ProductBatchCreateProductsRequest productBatchCreateProductsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productBatchCreateProductsRequest;

        // create path and map variables
        String localVarPath = "/{partner}/products/batch"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCreateProductsValidateBeforeCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, ProductBatchCreateProductsRequest productBatchCreateProductsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling batchCreateProducts(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling batchCreateProducts(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling batchCreateProducts(Async)");
        }

        // verify the required parameter 'productBatchCreateProductsRequest' is set
        if (productBatchCreateProductsRequest == null) {
            throw new ApiException("Missing the required parameter 'productBatchCreateProductsRequest' when calling batchCreateProducts(Async)");
        }

        return batchCreateProductsCall(xSeelAPIKey, xSeelAPIVersion, partner, productBatchCreateProductsRequest, _callback);

    }


    private ApiResponse<ProductBatchCreateProductsResponse> batchCreateProductsWithHttpInfo(String xSeelAPIKey, String xSeelAPIVersion, String partner, ProductBatchCreateProductsRequest productBatchCreateProductsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchCreateProductsValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, productBatchCreateProductsRequest, null);
        Type localVarReturnType = new TypeToken<ProductBatchCreateProductsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchCreateProductsAsync(String xSeelAPIKey, String xSeelAPIVersion, String partner, ProductBatchCreateProductsRequest productBatchCreateProductsRequest, final ApiCallback<ProductBatchCreateProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCreateProductsValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, productBatchCreateProductsRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductBatchCreateProductsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchCreateProductsRequestBuilder {
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private List<Product> products;

        private BatchCreateProductsRequestBuilder(String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set products
         * @param products The list of products. (optional)
         * @return BatchCreateProductsRequestBuilder
         */
        public BatchCreateProductsRequestBuilder products(List<Product> products) {
            this.products = products;
            return this;
        }
        
        /**
         * Build call for batchCreateProducts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductBatchCreateProductsRequest productBatchCreateProductsRequest = buildBodyParams();
            return batchCreateProductsCall(xSeelAPIKey, xSeelAPIVersion, partner, productBatchCreateProductsRequest, _callback);
        }

        private ProductBatchCreateProductsRequest buildBodyParams() {
            ProductBatchCreateProductsRequest productBatchCreateProductsRequest = new ProductBatchCreateProductsRequest();
            productBatchCreateProductsRequest.products(this.products);
            return productBatchCreateProductsRequest;
        }

        /**
         * Execute batchCreateProducts request
         * @return ProductBatchCreateProductsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ProductBatchCreateProductsResponse execute() throws ApiException {
            ProductBatchCreateProductsRequest productBatchCreateProductsRequest = buildBodyParams();
            ApiResponse<ProductBatchCreateProductsResponse> localVarResp = batchCreateProductsWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, productBatchCreateProductsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batchCreateProducts request with HTTP info returned
         * @return ApiResponse&lt;ProductBatchCreateProductsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProductBatchCreateProductsResponse> executeWithHttpInfo() throws ApiException {
            ProductBatchCreateProductsRequest productBatchCreateProductsRequest = buildBodyParams();
            return batchCreateProductsWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, productBatchCreateProductsRequest);
        }

        /**
         * Execute batchCreateProducts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProductBatchCreateProductsResponse> _callback) throws ApiException {
            ProductBatchCreateProductsRequest productBatchCreateProductsRequest = buildBodyParams();
            return batchCreateProductsAsync(xSeelAPIKey, xSeelAPIVersion, partner, productBatchCreateProductsRequest, _callback);
        }
    }

    /**
     * Batch create products
     * 
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param productBatchCreateProductsRequest  (required)
     * @return BatchCreateProductsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BatchCreateProductsRequestBuilder batchCreateProducts(String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new BatchCreateProductsRequestBuilder(xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call getProductByIdCall(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/products/{product_id}"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductByIdValidateBeforeCall(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductById(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling getProductById(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling getProductById(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling getProductById(Async)");
        }

        return getProductByIdCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Product> getProductByIdWithHttpInfo(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProductByIdAsync(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProductByIdRequestBuilder {
        private final String productId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private GetProductByIdRequestBuilder(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.productId = productId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for getProductById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProductByIdCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute getProductById request
         * @return Product
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Product execute() throws ApiException {
            ApiResponse<Product> localVarResp = getProductByIdWithHttpInfo(productId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProductById request with HTTP info returned
         * @return ApiResponse&lt;Product&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Product> executeWithHttpInfo() throws ApiException {
            return getProductByIdWithHttpInfo(productId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute getProductById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Product> _callback) throws ApiException {
            return getProductByIdAsync(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Get a product
     * 
     * @param productId ID of the product (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return GetProductByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetProductByIdRequestBuilder getProductById(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new GetProductByIdRequestBuilder(productId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call listPlansCall(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/products/{product_id}/plans"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPlansValidateBeforeCall(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling listPlans(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling listPlans(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling listPlans(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling listPlans(Async)");
        }

        return listPlansCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<List<ProductPlan>> listPlansWithHttpInfo(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = listPlansValidateBeforeCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<List<ProductPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPlansAsync(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<List<ProductPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPlansValidateBeforeCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<List<ProductPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPlansRequestBuilder {
        private final String productId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private ListPlansRequestBuilder(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.productId = productId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for listPlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPlansCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute listPlans request
         * @return List&lt;ProductPlan&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<ProductPlan> execute() throws ApiException {
            ApiResponse<List<ProductPlan>> localVarResp = listPlansWithHttpInfo(productId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPlans request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProductPlan&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProductPlan>> executeWithHttpInfo() throws ApiException {
            return listPlansWithHttpInfo(productId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute listPlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProductPlan>> _callback) throws ApiException {
            return listPlansAsync(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Get product plans
     * 
     * @param productId ID of the product (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return ListPlansRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListPlansRequestBuilder listPlans(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new ListPlansRequestBuilder(productId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call removeProductByIdCall(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/products/{product_id}"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProductByIdValidateBeforeCall(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling removeProductById(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling removeProductById(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling removeProductById(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling removeProductById(Async)");
        }

        return removeProductByIdCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Product> removeProductByIdWithHttpInfo(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = removeProductByIdValidateBeforeCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeProductByIdAsync(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProductByIdValidateBeforeCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveProductByIdRequestBuilder {
        private final String productId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private RemoveProductByIdRequestBuilder(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.productId = productId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for removeProductById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeProductByIdCall(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute removeProductById request
         * @return Product
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Product execute() throws ApiException {
            ApiResponse<Product> localVarResp = removeProductByIdWithHttpInfo(productId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeProductById request with HTTP info returned
         * @return ApiResponse&lt;Product&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Product> executeWithHttpInfo() throws ApiException {
            return removeProductByIdWithHttpInfo(productId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute removeProductById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Product> _callback) throws ApiException {
            return removeProductByIdAsync(productId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Delete a product
     * 
     * @param productId ID of the product (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return RemoveProductByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemoveProductByIdRequestBuilder removeProductById(String productId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new RemoveProductByIdRequestBuilder(productId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call updateProductDetailsCall(String productId, String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productUpdateProductDetailsRequest;

        // create path and map variables
        String localVarPath = "/{partner}/products/{product_id}"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductDetailsValidateBeforeCall(String productId, String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProductDetails(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling updateProductDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling updateProductDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling updateProductDetails(Async)");
        }

        // verify the required parameter 'productUpdateProductDetailsRequest' is set
        if (productUpdateProductDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'productUpdateProductDetailsRequest' when calling updateProductDetails(Async)");
        }

        return updateProductDetailsCall(productId, partner, xSeelAPIKey, xSeelAPIVersion, productUpdateProductDetailsRequest, _callback);

    }


    private ApiResponse<Product> updateProductDetailsWithHttpInfo(String productId, String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProductDetailsValidateBeforeCall(productId, partner, xSeelAPIKey, xSeelAPIVersion, productUpdateProductDetailsRequest, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProductDetailsAsync(String productId, String partner, String xSeelAPIKey, String xSeelAPIVersion, ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductDetailsValidateBeforeCall(productId, partner, xSeelAPIKey, xSeelAPIVersion, productUpdateProductDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProductDetailsRequestBuilder {
        private final String productId;
        private final String productTitle;
        private final String brandName;
        private final Double price;
        private final String currency;
        private final String productId;
        private final String partner;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private String merchantId;
        private String variantId;
        private String variantTitle;
        private String manufacturer;
        private String category1;
        private String category2;
        private String category3;
        private String category4;
        private String productDescription;
        private URI imageUrl;
        private Boolean requiresShipping;
        private String modelNumber;
        private String condition;
        private String sku;
        private ProductUpdateProductDetailsRequestIdentifiers identifiers;
        private ProductUpdateProductDetailsRequestManufacturerWarranty manufacturerWarranty;
        private ProductUpdateProductDetailsRequestDimensions dimensions;
        private ProductUpdateProductDetailsRequestWeight weight;
        private ProductUpdateProductDetailsRequestProductAttributes productAttributes;
        private OffsetDateTime createdTs;
        private OffsetDateTime updatedTs;

        private UpdateProductDetailsRequestBuilder(String productId, String productTitle, String brandName, Double price, String currency, String productId, String partner, String xSeelAPIKey, String xSeelAPIVersion) {
            this.productId = productId;
            this.productTitle = productTitle;
            this.brandName = brandName;
            this.price = price;
            this.currency = currency;
            this.productId = productId;
            this.partner = partner;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
        }

        /**
         * Set merchantId
         * @param merchantId The unique identifier for the merchant within Seel&#39;s system. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder merchantId(String merchantId) {
            this.merchantId = merchantId;
            return this;
        }
        
        /**
         * Set variantId
         * @param variantId Variant id, the unique identifier of a product SKU. Use &#39;product_id&#39; if the product doesn&#39;t have any variants. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder variantId(String variantId) {
            this.variantId = variantId;
            return this;
        }
        
        /**
         * Set variantTitle
         * @param variantTitle Title of the variant. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder variantTitle(String variantTitle) {
            this.variantTitle = variantTitle;
            return this;
        }
        
        /**
         * Set manufacturer
         * @param manufacturer Manufacturer of the item. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder manufacturer(String manufacturer) {
            this.manufacturer = manufacturer;
            return this;
        }
        
        /**
         * Set category1
         * @param category1 Main product category. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder category1(String category1) {
            this.category1 = category1;
            return this;
        }
        
        /**
         * Set category2
         * @param category2 Secondary product category. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder category2(String category2) {
            this.category2 = category2;
            return this;
        }
        
        /**
         * Set category3
         * @param category3 Tertiary product category. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder category3(String category3) {
            this.category3 = category3;
            return this;
        }
        
        /**
         * Set category4
         * @param category4 Fourth level product category. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder category4(String category4) {
            this.category4 = category4;
            return this;
        }
        
        /**
         * Set productDescription
         * @param productDescription Text description of the product. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder productDescription(String productDescription) {
            this.productDescription = productDescription;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl URL of the product image. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder imageUrl(URI imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set requiresShipping
         * @param requiresShipping Whether the product requires shipping. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder requiresShipping(Boolean requiresShipping) {
            this.requiresShipping = requiresShipping;
            return this;
        }
        
        /**
         * Set modelNumber
         * @param modelNumber Manufacturer model number. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder modelNumber(String modelNumber) {
            this.modelNumber = modelNumber;
            return this;
        }
        
        /**
         * Set condition
         * @param condition Condition - new, used, refurbished. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder condition(String condition) {
            this.condition = condition;
            return this;
        }
        
        /**
         * Set sku
         * @param sku Stock keeping unit. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Set identifiers
         * @param identifiers  (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder identifiers(ProductUpdateProductDetailsRequestIdentifiers identifiers) {
            this.identifiers = identifiers;
            return this;
        }
        
        /**
         * Set manufacturerWarranty
         * @param manufacturerWarranty  (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder manufacturerWarranty(ProductUpdateProductDetailsRequestManufacturerWarranty manufacturerWarranty) {
            this.manufacturerWarranty = manufacturerWarranty;
            return this;
        }
        
        /**
         * Set dimensions
         * @param dimensions  (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder dimensions(ProductUpdateProductDetailsRequestDimensions dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        
        /**
         * Set weight
         * @param weight  (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder weight(ProductUpdateProductDetailsRequestWeight weight) {
            this.weight = weight;
            return this;
        }
        
        /**
         * Set productAttributes
         * @param productAttributes  (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder productAttributes(ProductUpdateProductDetailsRequestProductAttributes productAttributes) {
            this.productAttributes = productAttributes;
            return this;
        }
        
        /**
         * Set createdTs
         * @param createdTs Timestamp when the product was created. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder createdTs(OffsetDateTime createdTs) {
            this.createdTs = createdTs;
            return this;
        }
        
        /**
         * Set updatedTs
         * @param updatedTs Timestamp when the product was updated. (optional)
         * @return UpdateProductDetailsRequestBuilder
         */
        public UpdateProductDetailsRequestBuilder updatedTs(OffsetDateTime updatedTs) {
            this.updatedTs = updatedTs;
            return this;
        }
        
        /**
         * Build call for updateProductDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest = buildBodyParams();
            return updateProductDetailsCall(productId, partner, xSeelAPIKey, xSeelAPIVersion, productUpdateProductDetailsRequest, _callback);
        }

        private ProductUpdateProductDetailsRequest buildBodyParams() {
            ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest = new ProductUpdateProductDetailsRequest();
            productUpdateProductDetailsRequest.merchantId(this.merchantId);
            productUpdateProductDetailsRequest.variantId(this.variantId);
            productUpdateProductDetailsRequest.productId(this.productId);
            productUpdateProductDetailsRequest.productTitle(this.productTitle);
            productUpdateProductDetailsRequest.variantTitle(this.variantTitle);
            productUpdateProductDetailsRequest.brandName(this.brandName);
            productUpdateProductDetailsRequest.manufacturer(this.manufacturer);
            productUpdateProductDetailsRequest.category1(this.category1);
            productUpdateProductDetailsRequest.category2(this.category2);
            productUpdateProductDetailsRequest.category3(this.category3);
            productUpdateProductDetailsRequest.category4(this.category4);
            productUpdateProductDetailsRequest.productDescription(this.productDescription);
            productUpdateProductDetailsRequest.imageUrl(this.imageUrl);
            productUpdateProductDetailsRequest.price(this.price);
            productUpdateProductDetailsRequest.currency(this.currency);
            productUpdateProductDetailsRequest.requiresShipping(this.requiresShipping);
            productUpdateProductDetailsRequest.modelNumber(this.modelNumber);
            productUpdateProductDetailsRequest.condition(this.condition);
            productUpdateProductDetailsRequest.sku(this.sku);
            productUpdateProductDetailsRequest.identifiers(this.identifiers);
            productUpdateProductDetailsRequest.manufacturerWarranty(this.manufacturerWarranty);
            productUpdateProductDetailsRequest.dimensions(this.dimensions);
            productUpdateProductDetailsRequest.weight(this.weight);
            productUpdateProductDetailsRequest.productAttributes(this.productAttributes);
            productUpdateProductDetailsRequest.createdTs(this.createdTs);
            productUpdateProductDetailsRequest.updatedTs(this.updatedTs);
            return productUpdateProductDetailsRequest;
        }

        /**
         * Execute updateProductDetails request
         * @return Product
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Product execute() throws ApiException {
            ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest = buildBodyParams();
            ApiResponse<Product> localVarResp = updateProductDetailsWithHttpInfo(productId, partner, xSeelAPIKey, xSeelAPIVersion, productUpdateProductDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProductDetails request with HTTP info returned
         * @return ApiResponse&lt;Product&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Product> executeWithHttpInfo() throws ApiException {
            ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest = buildBodyParams();
            return updateProductDetailsWithHttpInfo(productId, partner, xSeelAPIKey, xSeelAPIVersion, productUpdateProductDetailsRequest);
        }

        /**
         * Execute updateProductDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Product> _callback) throws ApiException {
            ProductUpdateProductDetailsRequest productUpdateProductDetailsRequest = buildBodyParams();
            return updateProductDetailsAsync(productId, partner, xSeelAPIKey, xSeelAPIVersion, productUpdateProductDetailsRequest, _callback);
        }
    }

    /**
     * Update a product
     * 
     * @param productId ID of the product (required)
     * @param partner partner name (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param productUpdateProductDetailsRequest  (required)
     * @return UpdateProductDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProductDetailsRequestBuilder updateProductDetails(String productId, String productTitle, String brandName, Double price, String currency, String productId, String partner, String xSeelAPIKey, String xSeelAPIVersion) throws IllegalArgumentException {
        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (productTitle == null) throw new IllegalArgumentException("\"productTitle\" is required but got null");
            

        if (brandName == null) throw new IllegalArgumentException("\"brandName\" is required but got null");
            

        if (price == null) throw new IllegalArgumentException("\"price\" is required but got null");
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        return new UpdateProductDetailsRequestBuilder(productId, productTitle, brandName, price, currency, productId, partner, xSeelAPIKey, xSeelAPIVersion);
    }
}
