/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.EventCreateNewEventRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEventCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, EventCreateNewEventRequest eventCreateNewEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventCreateNewEventRequest;

        // create path and map variables
        String localVarPath = "/{partner}/events"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEventValidateBeforeCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, EventCreateNewEventRequest eventCreateNewEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling createNewEvent(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling createNewEvent(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling createNewEvent(Async)");
        }

        // verify the required parameter 'eventCreateNewEventRequest' is set
        if (eventCreateNewEventRequest == null) {
            throw new ApiException("Missing the required parameter 'eventCreateNewEventRequest' when calling createNewEvent(Async)");
        }

        return createNewEventCall(xSeelAPIKey, xSeelAPIVersion, partner, eventCreateNewEventRequest, _callback);

    }


    private ApiResponse<Event> createNewEventWithHttpInfo(String xSeelAPIKey, String xSeelAPIVersion, String partner, EventCreateNewEventRequest eventCreateNewEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewEventValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, eventCreateNewEventRequest, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEventAsync(String xSeelAPIKey, String xSeelAPIVersion, String partner, EventCreateNewEventRequest eventCreateNewEventRequest, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEventValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, eventCreateNewEventRequest, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewEventRequestBuilder {
        private final String sessionId;
        private final String customerId;
        private final String eventSource;
        private final String eventType;
        private final Object eventInfo;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private String eventTs;
        private String deviceId;
        private String clientIp;

        private CreateNewEventRequestBuilder(String sessionId, String customerId, String eventSource, String eventType, Object eventInfo, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.sessionId = sessionId;
            this.customerId = customerId;
            this.eventSource = eventSource;
            this.eventType = eventType;
            this.eventInfo = eventInfo;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set eventTs
         * @param eventTs Event created timestamp in milliseconds (optional)
         * @return CreateNewEventRequestBuilder
         */
        public CreateNewEventRequestBuilder eventTs(String eventTs) {
            this.eventTs = eventTs;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId Device ID (optional)
         * @return CreateNewEventRequestBuilder
         */
        public CreateNewEventRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set clientIp
         * @param clientIp Browser IP address (optional)
         * @return CreateNewEventRequestBuilder
         */
        public CreateNewEventRequestBuilder clientIp(String clientIp) {
            this.clientIp = clientIp;
            return this;
        }
        
        /**
         * Build call for createNewEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventCreateNewEventRequest eventCreateNewEventRequest = buildBodyParams();
            return createNewEventCall(xSeelAPIKey, xSeelAPIVersion, partner, eventCreateNewEventRequest, _callback);
        }

        private EventCreateNewEventRequest buildBodyParams() {
            EventCreateNewEventRequest eventCreateNewEventRequest = new EventCreateNewEventRequest();
            eventCreateNewEventRequest.sessionId(this.sessionId);
            eventCreateNewEventRequest.eventTs(this.eventTs);
            eventCreateNewEventRequest.customerId(this.customerId);
            eventCreateNewEventRequest.deviceId(this.deviceId);
            eventCreateNewEventRequest.clientIp(this.clientIp);
            eventCreateNewEventRequest.eventSource(this.eventSource);
            if (this.eventType != null)
            eventCreateNewEventRequest.eventType(EventCreateNewEventRequest.EventTypeEnum.fromValue(this.eventType));
            eventCreateNewEventRequest.eventInfo(this.eventInfo);
            return eventCreateNewEventRequest;
        }

        /**
         * Execute createNewEvent request
         * @return Event
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Event execute() throws ApiException {
            EventCreateNewEventRequest eventCreateNewEventRequest = buildBodyParams();
            ApiResponse<Event> localVarResp = createNewEventWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, eventCreateNewEventRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewEvent request with HTTP info returned
         * @return ApiResponse&lt;Event&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Event> executeWithHttpInfo() throws ApiException {
            EventCreateNewEventRequest eventCreateNewEventRequest = buildBodyParams();
            return createNewEventWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, eventCreateNewEventRequest);
        }

        /**
         * Execute createNewEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Event> _callback) throws ApiException {
            EventCreateNewEventRequest eventCreateNewEventRequest = buildBodyParams();
            return createNewEventAsync(xSeelAPIKey, xSeelAPIVersion, partner, eventCreateNewEventRequest, _callback);
        }
    }

    /**
     * Create events
     * 
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param eventCreateNewEventRequest  (required)
     * @return CreateNewEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEventRequestBuilder createNewEvent(String sessionId, String customerId, String eventSource, String eventType, Object eventInfo, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        if (eventSource == null) throw new IllegalArgumentException("\"eventSource\" is required but got null");
            

        if (eventType == null) throw new IllegalArgumentException("\"eventType\" is required but got null");
            

        if (eventInfo == null) throw new IllegalArgumentException("\"eventInfo\" is required but got null");
        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new CreateNewEventRequestBuilder(sessionId, customerId, eventSource, eventType, eventInfo, xSeelAPIKey, xSeelAPIVersion, partner);
    }
}
