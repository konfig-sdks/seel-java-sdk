/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Merchant;
import com.konfigthis.client.model.MerchantCreateNewMerchantRequest;
import com.konfigthis.client.model.MerchantCreateNewMerchantRequestSeelServicesInner;
import com.konfigthis.client.model.MerchantListAllMerchantsResponse;
import com.konfigthis.client.model.MerchantUpdateMerchantDetailsRequest;
import com.konfigthis.client.model.MerchantUpdateMerchantDetailsRequestSeelServicesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MerchantApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMerchantCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantCreateNewMerchantRequest;

        // create path and map variables
        String localVarPath = "/{partner}/merchants"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMerchantValidateBeforeCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling createNewMerchant(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling createNewMerchant(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling createNewMerchant(Async)");
        }

        // verify the required parameter 'merchantCreateNewMerchantRequest' is set
        if (merchantCreateNewMerchantRequest == null) {
            throw new ApiException("Missing the required parameter 'merchantCreateNewMerchantRequest' when calling createNewMerchant(Async)");
        }

        return createNewMerchantCall(xSeelAPIKey, xSeelAPIVersion, partner, merchantCreateNewMerchantRequest, _callback);

    }


    private ApiResponse<Merchant> createNewMerchantWithHttpInfo(String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewMerchantValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, merchantCreateNewMerchantRequest, null);
        Type localVarReturnType = new TypeToken<Merchant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMerchantAsync(String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest, final ApiCallback<Merchant> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMerchantValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, merchantCreateNewMerchantRequest, _callback);
        Type localVarReturnType = new TypeToken<Merchant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMerchantRequestBuilder {
        private final String shopId;
        private final String adminDomain;
        private final String shopDomain;
        private final String shopPlatform;
        private final String shopCurrency;
        private final String shopName;
        private final String contactName;
        private final String contactEmail;
        private final List<MerchantCreateNewMerchantRequestSeelServicesInner> seelServices;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private String contactPhoneNumber;

        private CreateNewMerchantRequestBuilder(String shopId, String adminDomain, String shopDomain, String shopPlatform, String shopCurrency, String shopName, String contactName, String contactEmail, List<MerchantCreateNewMerchantRequestSeelServicesInner> seelServices, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.shopId = shopId;
            this.adminDomain = adminDomain;
            this.shopDomain = shopDomain;
            this.shopPlatform = shopPlatform;
            this.shopCurrency = shopCurrency;
            this.shopName = shopName;
            this.contactName = contactName;
            this.contactEmail = contactEmail;
            this.seelServices = seelServices;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set contactPhoneNumber
         * @param contactPhoneNumber The phone number on file for the merchant. (optional)
         * @return CreateNewMerchantRequestBuilder
         */
        public CreateNewMerchantRequestBuilder contactPhoneNumber(String contactPhoneNumber) {
            this.contactPhoneNumber = contactPhoneNumber;
            return this;
        }
        
        /**
         * Build call for createNewMerchant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest = buildBodyParams();
            return createNewMerchantCall(xSeelAPIKey, xSeelAPIVersion, partner, merchantCreateNewMerchantRequest, _callback);
        }

        private MerchantCreateNewMerchantRequest buildBodyParams() {
            MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest = new MerchantCreateNewMerchantRequest();
            merchantCreateNewMerchantRequest.shopId(this.shopId);
            merchantCreateNewMerchantRequest.adminDomain(this.adminDomain);
            merchantCreateNewMerchantRequest.shopDomain(this.shopDomain);
            merchantCreateNewMerchantRequest.shopPlatform(this.shopPlatform);
            merchantCreateNewMerchantRequest.shopCurrency(this.shopCurrency);
            merchantCreateNewMerchantRequest.shopName(this.shopName);
            merchantCreateNewMerchantRequest.contactName(this.contactName);
            merchantCreateNewMerchantRequest.contactEmail(this.contactEmail);
            merchantCreateNewMerchantRequest.contactPhoneNumber(this.contactPhoneNumber);
            merchantCreateNewMerchantRequest.seelServices(this.seelServices);
            return merchantCreateNewMerchantRequest;
        }

        /**
         * Execute createNewMerchant request
         * @return Merchant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Merchant execute() throws ApiException {
            MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest = buildBodyParams();
            ApiResponse<Merchant> localVarResp = createNewMerchantWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, merchantCreateNewMerchantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMerchant request with HTTP info returned
         * @return ApiResponse&lt;Merchant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Merchant> executeWithHttpInfo() throws ApiException {
            MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest = buildBodyParams();
            return createNewMerchantWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, merchantCreateNewMerchantRequest);
        }

        /**
         * Execute createNewMerchant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Merchant> _callback) throws ApiException {
            MerchantCreateNewMerchantRequest merchantCreateNewMerchantRequest = buildBodyParams();
            return createNewMerchantAsync(xSeelAPIKey, xSeelAPIVersion, partner, merchantCreateNewMerchantRequest, _callback);
        }
    }

    /**
     * Create a merchant
     * 
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param merchantCreateNewMerchantRequest  (required)
     * @return CreateNewMerchantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMerchantRequestBuilder createNewMerchant(String shopId, String adminDomain, String shopDomain, String shopPlatform, String shopCurrency, String shopName, String contactName, String contactEmail, List<MerchantCreateNewMerchantRequestSeelServicesInner> seelServices, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (shopId == null) throw new IllegalArgumentException("\"shopId\" is required but got null");
            

        if (adminDomain == null) throw new IllegalArgumentException("\"adminDomain\" is required but got null");
            

        if (shopDomain == null) throw new IllegalArgumentException("\"shopDomain\" is required but got null");
            

        if (shopPlatform == null) throw new IllegalArgumentException("\"shopPlatform\" is required but got null");
            

        if (shopCurrency == null) throw new IllegalArgumentException("\"shopCurrency\" is required but got null");
            

        if (shopName == null) throw new IllegalArgumentException("\"shopName\" is required but got null");
            

        if (contactName == null) throw new IllegalArgumentException("\"contactName\" is required but got null");
            

        if (contactEmail == null) throw new IllegalArgumentException("\"contactEmail\" is required but got null");
            

        if (seelServices == null) throw new IllegalArgumentException("\"seelServices\" is required but got null");
        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new CreateNewMerchantRequestBuilder(shopId, adminDomain, shopDomain, shopPlatform, shopCurrency, shopName, contactName, contactEmail, seelServices, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call getMerchantDetailsCall(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/merchants/{merchant_id}"
            .replace("{" + "merchant_id" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantDetailsValidateBeforeCall(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling getMerchantDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling getMerchantDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling getMerchantDetails(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling getMerchantDetails(Async)");
        }

        return getMerchantDetailsCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Merchant> getMerchantDetailsWithHttpInfo(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = getMerchantDetailsValidateBeforeCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Merchant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMerchantDetailsAsync(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Merchant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantDetailsValidateBeforeCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Merchant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMerchantDetailsRequestBuilder {
        private final String merchantId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private GetMerchantDetailsRequestBuilder(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.merchantId = merchantId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for getMerchantDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMerchantDetailsCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute getMerchantDetails request
         * @return Merchant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Merchant execute() throws ApiException {
            ApiResponse<Merchant> localVarResp = getMerchantDetailsWithHttpInfo(merchantId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMerchantDetails request with HTTP info returned
         * @return ApiResponse&lt;Merchant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Merchant> executeWithHttpInfo() throws ApiException {
            return getMerchantDetailsWithHttpInfo(merchantId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute getMerchantDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Merchant> _callback) throws ApiException {
            return getMerchantDetailsAsync(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Get a merchant
     * 
     * @param merchantId ID of the merchant (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return GetMerchantDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantDetailsRequestBuilder getMerchantDetails(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (merchantId == null) throw new IllegalArgumentException("\"merchantId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new GetMerchantDetailsRequestBuilder(merchantId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call listAllMerchantsCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/merchants"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllMerchantsValidateBeforeCall(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling listAllMerchants(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling listAllMerchants(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling listAllMerchants(Async)");
        }

        return listAllMerchantsCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);

    }


    private ApiResponse<MerchantListAllMerchantsResponse> listAllMerchantsWithHttpInfo(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAllMerchantsValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, null);
        Type localVarReturnType = new TypeToken<MerchantListAllMerchantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllMerchantsAsync(String xSeelAPIKey, String xSeelAPIVersion, String partner, Integer page, Integer pageSize, final ApiCallback<MerchantListAllMerchantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllMerchantsValidateBeforeCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<MerchantListAllMerchantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllMerchantsRequestBuilder {
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private Integer page;
        private Integer pageSize;

        private ListAllMerchantsRequestBuilder(String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set page
         * @param page Query by page, default 0 (optional, default to 0)
         * @return ListAllMerchantsRequestBuilder
         */
        public ListAllMerchantsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Query by page_size, default 100 (optional, default to 100)
         * @return ListAllMerchantsRequestBuilder
         */
        public ListAllMerchantsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listAllMerchants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllMerchantsCall(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        }


        /**
         * Execute listAllMerchants request
         * @return MerchantListAllMerchantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public MerchantListAllMerchantsResponse execute() throws ApiException {
            ApiResponse<MerchantListAllMerchantsResponse> localVarResp = listAllMerchantsWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllMerchants request with HTTP info returned
         * @return ApiResponse&lt;MerchantListAllMerchantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MerchantListAllMerchantsResponse> executeWithHttpInfo() throws ApiException {
            return listAllMerchantsWithHttpInfo(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize);
        }

        /**
         * Execute listAllMerchants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MerchantListAllMerchantsResponse> _callback) throws ApiException {
            return listAllMerchantsAsync(xSeelAPIKey, xSeelAPIVersion, partner, page, pageSize, _callback);
        }
    }

    /**
     * List merchants
     * 
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return ListAllMerchantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllMerchantsRequestBuilder listAllMerchants(String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new ListAllMerchantsRequestBuilder(xSeelAPIKey, xSeelAPIVersion, partner);
    }
    private okhttp3.Call updateMerchantDetailsCall(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantUpdateMerchantDetailsRequest;

        // create path and map variables
        String localVarPath = "/{partner}/merchants/{merchant_id}"
            .replace("{" + "merchant_id" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMerchantDetailsValidateBeforeCall(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling updateMerchantDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling updateMerchantDetails(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling updateMerchantDetails(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling updateMerchantDetails(Async)");
        }

        // verify the required parameter 'merchantUpdateMerchantDetailsRequest' is set
        if (merchantUpdateMerchantDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'merchantUpdateMerchantDetailsRequest' when calling updateMerchantDetails(Async)");
        }

        return updateMerchantDetailsCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, merchantUpdateMerchantDetailsRequest, _callback);

    }


    private ApiResponse<Merchant> updateMerchantDetailsWithHttpInfo(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMerchantDetailsValidateBeforeCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, merchantUpdateMerchantDetailsRequest, null);
        Type localVarReturnType = new TypeToken<Merchant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMerchantDetailsAsync(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner, MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest, final ApiCallback<Merchant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMerchantDetailsValidateBeforeCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, merchantUpdateMerchantDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<Merchant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMerchantDetailsRequestBuilder {
        private final String merchantId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;
        private String shopId;
        private String adminDomain;
        private String shopDomain;
        private String shopPlatform;
        private String shopCurrency;
        private String shopName;
        private String contactName;
        private String contactEmail;
        private String contactPhoneNumber;
        private List<MerchantUpdateMerchantDetailsRequestSeelServicesInner> seelServices;

        private UpdateMerchantDetailsRequestBuilder(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.merchantId = merchantId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Set shopId
         * @param shopId The identifier for the shop or store within the partner&#39;s platform. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder shopId(String shopId) {
            this.shopId = shopId;
            return this;
        }
        
        /**
         * Set adminDomain
         * @param adminDomain The original subdomain domain for the shop provided by the ecommerce platform, e.g. subdomain.myshopify.com (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder adminDomain(String adminDomain) {
            this.adminDomain = adminDomain;
            return this;
        }
        
        /**
         * Set shopDomain
         * @param shopDomain The custom domain name assigned to the shop, e.g. www.myshop.com. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder shopDomain(String shopDomain) {
            this.shopDomain = shopDomain;
            return this;
        }
        
        /**
         * Set shopPlatform
         * @param shopPlatform The source ecommerce platform for the shop, e.g. Shopify, BigCommerce. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder shopPlatform(String shopPlatform) {
            this.shopPlatform = shopPlatform;
            return this;
        }
        
        /**
         * Set shopCurrency
         * @param shopCurrency 3-letter ISO 4217 currency code for the primary currency used in the shop, e.g. USD, EUR. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder shopCurrency(String shopCurrency) {
            this.shopCurrency = shopCurrency;
            return this;
        }
        
        /**
         * Set shopName
         * @param shopName The registered business name for the shop. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder shopName(String shopName) {
            this.shopName = shopName;
            return this;
        }
        
        /**
         * Set contactName
         * @param contactName The registered business name for the merchant. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder contactName(String contactName) {
            this.contactName = contactName;
            return this;
        }
        
        /**
         * Set contactEmail
         * @param contactEmail The contact email address on file for the merchant. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder contactEmail(String contactEmail) {
            this.contactEmail = contactEmail;
            return this;
        }
        
        /**
         * Set contactPhoneNumber
         * @param contactPhoneNumber The phone number on file for the merchant. (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder contactPhoneNumber(String contactPhoneNumber) {
            this.contactPhoneNumber = contactPhoneNumber;
            return this;
        }
        
        /**
         * Set seelServices
         * @param seelServices  (optional)
         * @return UpdateMerchantDetailsRequestBuilder
         */
        public UpdateMerchantDetailsRequestBuilder seelServices(List<MerchantUpdateMerchantDetailsRequestSeelServicesInner> seelServices) {
            this.seelServices = seelServices;
            return this;
        }
        
        /**
         * Build call for updateMerchantDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest = buildBodyParams();
            return updateMerchantDetailsCall(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, merchantUpdateMerchantDetailsRequest, _callback);
        }

        private MerchantUpdateMerchantDetailsRequest buildBodyParams() {
            MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest = new MerchantUpdateMerchantDetailsRequest();
            merchantUpdateMerchantDetailsRequest.shopId(this.shopId);
            merchantUpdateMerchantDetailsRequest.adminDomain(this.adminDomain);
            merchantUpdateMerchantDetailsRequest.shopDomain(this.shopDomain);
            merchantUpdateMerchantDetailsRequest.shopPlatform(this.shopPlatform);
            merchantUpdateMerchantDetailsRequest.shopCurrency(this.shopCurrency);
            merchantUpdateMerchantDetailsRequest.shopName(this.shopName);
            merchantUpdateMerchantDetailsRequest.contactName(this.contactName);
            merchantUpdateMerchantDetailsRequest.contactEmail(this.contactEmail);
            merchantUpdateMerchantDetailsRequest.contactPhoneNumber(this.contactPhoneNumber);
            merchantUpdateMerchantDetailsRequest.seelServices(this.seelServices);
            return merchantUpdateMerchantDetailsRequest;
        }

        /**
         * Execute updateMerchantDetails request
         * @return Merchant
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Merchant execute() throws ApiException {
            MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest = buildBodyParams();
            ApiResponse<Merchant> localVarResp = updateMerchantDetailsWithHttpInfo(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, merchantUpdateMerchantDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMerchantDetails request with HTTP info returned
         * @return ApiResponse&lt;Merchant&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Merchant> executeWithHttpInfo() throws ApiException {
            MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest = buildBodyParams();
            return updateMerchantDetailsWithHttpInfo(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, merchantUpdateMerchantDetailsRequest);
        }

        /**
         * Execute updateMerchantDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Merchant> _callback) throws ApiException {
            MerchantUpdateMerchantDetailsRequest merchantUpdateMerchantDetailsRequest = buildBodyParams();
            return updateMerchantDetailsAsync(merchantId, xSeelAPIKey, xSeelAPIVersion, partner, merchantUpdateMerchantDetailsRequest, _callback);
        }
    }

    /**
     * Update a merchant
     * 
     * @param merchantId ID of the merchant (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @param merchantUpdateMerchantDetailsRequest  (required)
     * @return UpdateMerchantDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMerchantDetailsRequestBuilder updateMerchantDetails(String merchantId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (merchantId == null) throw new IllegalArgumentException("\"merchantId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new UpdateMerchantDetailsRequestBuilder(merchantId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
}
