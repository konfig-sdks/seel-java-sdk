/*
 * Seel API
 * Seel API
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.Quote;
import com.konfigthis.client.model.QuoteGenerateQuoteRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QuoteApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuoteApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QuoteApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateQuoteCall(String partner, String xSeelAPIKey, String xSeelAPIVersion, QuoteGenerateQuoteRequest quoteGenerateQuoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteGenerateQuoteRequest;

        // create path and map variables
        String localVarPath = "/{partner}/quotes"
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateQuoteValidateBeforeCall(String partner, String xSeelAPIKey, String xSeelAPIVersion, QuoteGenerateQuoteRequest quoteGenerateQuoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling generateQuote(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling generateQuote(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling generateQuote(Async)");
        }

        // verify the required parameter 'quoteGenerateQuoteRequest' is set
        if (quoteGenerateQuoteRequest == null) {
            throw new ApiException("Missing the required parameter 'quoteGenerateQuoteRequest' when calling generateQuote(Async)");
        }

        return generateQuoteCall(partner, xSeelAPIKey, xSeelAPIVersion, quoteGenerateQuoteRequest, _callback);

    }


    private ApiResponse<Quote> generateQuoteWithHttpInfo(String partner, String xSeelAPIKey, String xSeelAPIVersion, QuoteGenerateQuoteRequest quoteGenerateQuoteRequest) throws ApiException {
        okhttp3.Call localVarCall = generateQuoteValidateBeforeCall(partner, xSeelAPIKey, xSeelAPIVersion, quoteGenerateQuoteRequest, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateQuoteAsync(String partner, String xSeelAPIKey, String xSeelAPIVersion, QuoteGenerateQuoteRequest quoteGenerateQuoteRequest, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateQuoteValidateBeforeCall(partner, xSeelAPIKey, xSeelAPIVersion, quoteGenerateQuoteRequest, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateQuoteRequestBuilder {
        private final String sessionId;
        private final String type;
        private final List<Item> lineItems;
        private final Address shippingAddress;
        private final Customer customer;
        private final String partner;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private String cartId;
        private String merchantId;
        private String deviceId;
        private String clientIp;
        private Object extraInfo;

        private GenerateQuoteRequestBuilder(String sessionId, String type, List<Item> lineItems, Address shippingAddress, Customer customer, String partner, String xSeelAPIKey, String xSeelAPIVersion) {
            this.sessionId = sessionId;
            this.type = type;
            this.lineItems = lineItems;
            this.shippingAddress = shippingAddress;
            this.customer = customer;
            this.partner = partner;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
        }

        /**
         * Set cartId
         * @param cartId The ID of a cart. (optional)
         * @return GenerateQuoteRequestBuilder
         */
        public GenerateQuoteRequestBuilder cartId(String cartId) {
            this.cartId = cartId;
            return this;
        }
        
        /**
         * Set merchantId
         * @param merchantId The unique identifier for the merchant within Seel&#39;s system. (optional)
         * @return GenerateQuoteRequestBuilder
         */
        public GenerateQuoteRequestBuilder merchantId(String merchantId) {
            this.merchantId = merchantId;
            return this;
        }
        
        /**
         * Set deviceId
         * @param deviceId The ID of the client device. (optional)
         * @return GenerateQuoteRequestBuilder
         */
        public GenerateQuoteRequestBuilder deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }
        
        /**
         * Set clientIp
         * @param clientIp The IP address of the client. (optional)
         * @return GenerateQuoteRequestBuilder
         */
        public GenerateQuoteRequestBuilder clientIp(String clientIp) {
            this.clientIp = clientIp;
            return this;
        }
        
        /**
         * Set extraInfo
         * @param extraInfo Additional information for the quote (optional)
         * @return GenerateQuoteRequestBuilder
         */
        public GenerateQuoteRequestBuilder extraInfo(Object extraInfo) {
            this.extraInfo = extraInfo;
            return this;
        }
        
        /**
         * Build call for generateQuote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QuoteGenerateQuoteRequest quoteGenerateQuoteRequest = buildBodyParams();
            return generateQuoteCall(partner, xSeelAPIKey, xSeelAPIVersion, quoteGenerateQuoteRequest, _callback);
        }

        private QuoteGenerateQuoteRequest buildBodyParams() {
            QuoteGenerateQuoteRequest quoteGenerateQuoteRequest = new QuoteGenerateQuoteRequest();
            quoteGenerateQuoteRequest.cartId(this.cartId);
            quoteGenerateQuoteRequest.merchantId(this.merchantId);
            quoteGenerateQuoteRequest.sessionId(this.sessionId);
            quoteGenerateQuoteRequest.deviceId(this.deviceId);
            quoteGenerateQuoteRequest.clientIp(this.clientIp);
            quoteGenerateQuoteRequest.type(this.type);
            quoteGenerateQuoteRequest.lineItems(this.lineItems);
            quoteGenerateQuoteRequest.shippingAddress(this.shippingAddress);
            quoteGenerateQuoteRequest.customer(this.customer);
            quoteGenerateQuoteRequest.extraInfo(this.extraInfo);
            return quoteGenerateQuoteRequest;
        }

        /**
         * Execute generateQuote request
         * @return Quote
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Quote execute() throws ApiException {
            QuoteGenerateQuoteRequest quoteGenerateQuoteRequest = buildBodyParams();
            ApiResponse<Quote> localVarResp = generateQuoteWithHttpInfo(partner, xSeelAPIKey, xSeelAPIVersion, quoteGenerateQuoteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateQuote request with HTTP info returned
         * @return ApiResponse&lt;Quote&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Quote> executeWithHttpInfo() throws ApiException {
            QuoteGenerateQuoteRequest quoteGenerateQuoteRequest = buildBodyParams();
            return generateQuoteWithHttpInfo(partner, xSeelAPIKey, xSeelAPIVersion, quoteGenerateQuoteRequest);
        }

        /**
         * Execute generateQuote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Quote> _callback) throws ApiException {
            QuoteGenerateQuoteRequest quoteGenerateQuoteRequest = buildBodyParams();
            return generateQuoteAsync(partner, xSeelAPIKey, xSeelAPIVersion, quoteGenerateQuoteRequest, _callback);
        }
    }

    /**
     * Create a quote
     * 
     * @param partner partner name (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param quoteGenerateQuoteRequest  (required)
     * @return GenerateQuoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GenerateQuoteRequestBuilder generateQuote(String sessionId, String type, List<Item> lineItems, Address shippingAddress, Customer customer, String partner, String xSeelAPIKey, String xSeelAPIVersion) throws IllegalArgumentException {
        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (lineItems == null) throw new IllegalArgumentException("\"lineItems\" is required but got null");
        if (shippingAddress == null) throw new IllegalArgumentException("\"shippingAddress\" is required but got null");
        if (customer == null) throw new IllegalArgumentException("\"customer\" is required but got null");
        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        return new GenerateQuoteRequestBuilder(sessionId, type, lineItems, shippingAddress, customer, partner, xSeelAPIKey, xSeelAPIVersion);
    }
    private okhttp3.Call getByIdCall(String quoteId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{partner}/quotes/{quote_id}"
            .replace("{" + "quote_id" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSeelAPIKey != null) {
            localVarHeaderParams.put("X-Seel-API-Key", localVarApiClient.parameterToString(xSeelAPIKey));
        }

        if (xSeelAPIVersion != null) {
            localVarHeaderParams.put("X-Seel-API-Version", localVarApiClient.parameterToString(xSeelAPIVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String quoteId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getById(Async)");
        }

        // verify the required parameter 'xSeelAPIKey' is set
        if (xSeelAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIKey' when calling getById(Async)");
        }

        // verify the required parameter 'xSeelAPIVersion' is set
        if (xSeelAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xSeelAPIVersion' when calling getById(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling getById(Async)");
        }

        return getByIdCall(quoteId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);

    }


    private ApiResponse<Quote> getByIdWithHttpInfo(String quoteId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(quoteId, xSeelAPIKey, xSeelAPIVersion, partner, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String quoteId, String xSeelAPIKey, String xSeelAPIVersion, String partner, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(quoteId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String quoteId;
        private final String xSeelAPIKey;
        private final String xSeelAPIVersion;
        private final String partner;

        private GetByIdRequestBuilder(String quoteId, String xSeelAPIKey, String xSeelAPIVersion, String partner) {
            this.quoteId = quoteId;
            this.xSeelAPIKey = xSeelAPIKey;
            this.xSeelAPIVersion = xSeelAPIVersion;
            this.partner = partner;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(quoteId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }


        /**
         * Execute getById request
         * @return Quote
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Quote execute() throws ApiException {
            ApiResponse<Quote> localVarResp = getByIdWithHttpInfo(quoteId, xSeelAPIKey, xSeelAPIVersion, partner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Quote&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Quote> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(quoteId, xSeelAPIKey, xSeelAPIVersion, partner);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Quote> _callback) throws ApiException {
            return getByIdAsync(quoteId, xSeelAPIKey, xSeelAPIVersion, partner, _callback);
        }
    }

    /**
     * Get a quote
     * 
     * @param quoteId ID of the quote (required)
     * @param xSeelAPIKey Your Seel API key (required)
     * @param xSeelAPIVersion Version of the Seel API to use (required)
     * @param partner partner name (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String quoteId, String xSeelAPIKey, String xSeelAPIVersion, String partner) throws IllegalArgumentException {
        if (quoteId == null) throw new IllegalArgumentException("\"quoteId\" is required but got null");
            

        if (xSeelAPIKey == null) throw new IllegalArgumentException("\"xSeelAPIKey\" is required but got null");
            

        if (xSeelAPIVersion == null) throw new IllegalArgumentException("\"xSeelAPIVersion\" is required but got null");
            

        if (partner == null) throw new IllegalArgumentException("\"partner\" is required but got null");
            

        return new GetByIdRequestBuilder(quoteId, xSeelAPIKey, xSeelAPIVersion, partner);
    }
}
